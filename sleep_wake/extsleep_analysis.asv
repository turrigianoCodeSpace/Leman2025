%% extsleep_analysis.m

% Brian Cary greatly edited/adapted from Alejandro Torrado Pacheco et al - 2021


%% SETUP
% clear workspace
% clearIDE

mfilePath = mfilename('fullpath');
if isempty(mfilePath)
    mfilePath = matlab.desktop.editor.getActiveFilename;
end
cd(fileparts(mfilePath))

% Path to processed data structure including spike times, features, etc.
filepath = "Z:\BrianCary\CODE\Dan_SW_FR_analysis\Dan_version_ofAlejCode\stored_data\ContCell_MasterStrct_v3_DL78pred.mat";

sp_filepath = split(filepath,'\');
sp_path2 = split(sp_filepath(end),'.mat');
savename = [char(sp_path2{1}),'_extsleep_WS.mat'];
savedata_dir = [fileparts(mfilePath), '\stored_data'];
if ~exist(savedata_dir, 'dir')
   mkdir(savedata_dir)
end

%% initialize vars + params

savedata_path = [savedata_dir,filesep,savename];

loadFile = load(filepath);

loadFields = fieldnames(loadFile);
loadFieldname = loadFields{1};

MASTER = loadFile.(loadFieldname).MASTER;
try
    STATES = loadFile.(loadFieldname).STATETIMES;
catch
    STATES = loadFile.(loadFieldname).STATES;
end
DAYSTART = STATES.DAYSTART;
anim_fields = fieldnames(STATES);
anim_fields(strcmp(anim_fields,'DAYSTART')) = [];
n_anims = numel(anim_fields); % minus daystart field

cell_anims = {MASTER.animal};

already_corrected = 0;

% colors for plotting
c_rem   = [25 181 149]./255;
c_nrem  = [131 49 146]./255;
c_aw    = [201 28 101]./255;
c_qw    = [247 148 41]./255;

% analysis flags
save_delta_data = 0;
use_periods = 0;

% % period of interest
% homeo_period_start = 0; % beginning of day4's dark period (night after hunting)
% homeo_period_end = 3.05; % plus hour
homeo_period_start = 3.5; % beginning of day4's dark period (night after hunting)
homeo_period_end = 6.1; % 

post_hunt_hr = 3.5*24;

% cell selection parameters
ontime_hr_YES = 1;

G_bin = 1; % seconds. Bin size for FR calculations.

% mean_t sets the normalizing mode:
%   0 for no normalization
%   1 for z-scoring to sleep epoch (combined REM and NREM this is why REM is
%   stil higher)
%   2 for z-scoring to all recorded times for this cell
%   3 for fractional change
%   4 for combination frac and z-score sleep epoch
%   5 use frac of episode like in 4, restrict to like state, but measure
%   norm change like in 3
%   6 use frac of episode like in 4, restrict to like state, measure %
%   change
mean_t = 6;

% correlation type
corr_type = 'Pearson';

% analysis parameters
dur_frac = 0.30; % only used if mean_t == 3
% extended sleep minimum duration
ext_sleep_time_thresh = 30; % minutes
ext_sleep_int_thresh = 120; % seconds. Max time for interrupting bouts

min_FR_dur_frac = 0.05;
max_FR_dur_frac_Delta = 6;
max_FR_perc_Delta = 600;

min_period_FR = 0.1;

% new param to handle large changes in FR between states
edge_buffer_sec = 75;

% individual states duration thresholds
interrupt_threshold = 10; % seconds - get rid of states shorter than this value
duration_threshold = 30; % seconds - ignore states shorter than this (no FR calculation)

% time start and end for main FR calculation
t_start = 0;
t_stop = 10*24*3600;

% animal list selection
% anim_list = {'BL65','BL69','DL44','DL79','DL97'};
anim_list = anim_fields;

disp('Bypassing the original get_RSUs function!')

% correct on/off time units to seconds
if ontime_hr_YES && ~already_corrected
    for i = 1:length(MASTER)
        MASTER(i).onTime = MASTER(i).onTime*3600;
        MASTER(i).offTime = MASTER(i).offTime*3600;
    end

    already_corrected = 1;
end

%% Loop through animals and find extended sleep periods

for aa = 1:n_anims
    animal = anim_fields{aa};
    
    % get statetimes for tis animal
    statetimes = STATES.(animal);
    
    % remove repeats
    st_diff = diff(statetimes(:,1));
    kill_these = find(st_diff==0);
    statetimes(kill_these+1,:) = [];
    
    % remove short states
    st_timediff = diff(statetimes(:,2));
    too_short = find(st_timediff <= interrupt_threshold);
    statetimes(too_short,:) = [];
    
    % remove repeats again
    st_diff = diff(statetimes(:,1));
    kill_these = find(st_diff==0);
    statetimes(kill_these+1,:) = [];
    
    % FIND EXTENDED SLEEP - see function
    ext_sleeps = find_extended_sleep(statetimes,ext_sleep_time_thresh,ext_sleep_int_thresh);
    
    sleep_props = [];
    for e_i = 1:size(ext_sleeps,1)
        e_states = statetimes(ext_sleeps(e_i,1):ext_sleeps(e_i,2),:);
        e_dur = e_states(end,2) - e_states(1,2);
        
        try
            wake_inds = find(e_states(:,1) > 3);
            wake_durs = e_states(wake_inds+1,2) - e_states(wake_inds,2);
            
            sleep_props(e_i) = (e_dur - sum(wake_durs)) / e_dur;
        catch
            sleep_props(e_i) = NaN;
        end
    end

    % save ext sleeps for this animal
    all_extsleeps{aa} = ext_sleeps;
    
    % find experiment start time for this animal
    expstart_raw = unixtime(statetimes(1,2));
    expstart_unix = [expstart_raw(1:3) 7 30 0];
    expstart_t = unixtime(expstart_unix);
    
    all_expstart{aa} = expstart_t;
    
    clear  ext_sleeps expstart* statetimes
end

% initialize variables
all_NREM_zFR = [];
all_NREM_offT = [];
all_REM_zFR = [];
all_REM_offT = [];

%% Loop through animals and do FR analysis
loop_plot_on = 0;

do_perc = 0;
for aa = 1:n_anims
    animal = anim_fields{aa};
    fprintf('Animal %s.\n',animal);
    
    if any(strcmp(anim_list,animal))
        
        if use_periods
            homeo_start = rec_periods{aa}(1)*24*3600;
            homeo_end = rec_periods{aa}(2)*24*3600;
        else
            homeo_start = homeo_period_start*24*3600;
            homeo_end = homeo_period_end*24*3600;
        end
        
        % find this animal's cells
        anim_rsu_idx = find(strcmp(cell_anims,animal));
        anim_cells = MASTER(anim_rsu_idx);
        
        % find the cells according to specified parameters using get_RSUs
        % function.
        rsu = MASTER(anim_rsu_idx);
        n_RSU = size(rsu,2);

        anim_idx = find(strcmp(anim_fields,animal));
        
        % RETRIEVE STATE DATA
        ext_sleeps = all_extsleeps{anim_idx};
        expstart_t = all_expstart{anim_idx};
        
        statetimes = STATES.(animal);
        
        % remove repeats
        st_diff = diff(statetimes(:,1));
        kill_these = find(st_diff==0);
        statetimes(kill_these+1,:) = [];
        
        % remove short states
        st_timediff = diff(statetimes(:,2));
        too_short = find(st_timediff <= interrupt_threshold);
        statetimes(too_short,:) = [];
        
        % remove repeats again
        st_diff = diff(statetimes(:,1));
        kill_these = find(st_diff==0);
        statetimes(kill_these+1,:) = [];
        
        % get animal daystart variable
        daystart = DAYSTART.(animal);
        
        % find number of extended sleep episodes
        n_sleeps = size(ext_sleeps,1);
        
        % initialize variables
        all_sleep_dur{anim_idx} = nan(n_sleeps, n_RSU);
        sleep_starts{anim_idx} = nan(n_sleeps, n_RSU);
        deltaFR_NREM{anim_idx} = nan(n_sleeps,n_RSU);
        deltaFR_REM{anim_idx} = nan(n_sleeps,n_RSU);
        percent_NREM{anim_idx} = nan(n_sleeps,n_RSU);
        percent_REM{anim_idx} = nan(n_sleeps,n_RSU);
        num_REM_eps{anim_idx} = nan(n_sleeps, n_RSU);
        
        % loop through ext sleep episodes
        for tt = 1:n_sleeps
            
            fprintf('Extended sleep epoch %u of %u.\n',tt,n_sleeps);
            
            % find the states occurring during this episode
            st_sleep = statetimes(ext_sleeps(tt,1):ext_sleeps(tt,2)+1,:);
            
            st_sleep(:,2) = st_sleep(:,2) - expstart_t + daystart*24*3600;
            
            if st_sleep(end,1) < 3 % last is sleep, this might happen at edges
                disp('last state not wake, should be edge case')
                disp('skipping...')
                
                continue
            end

            try
                % find duration and percent of REM and NREM states within
                % ext sleep episode
                sleep_durs = diff(st_sleep(:,2));
                total_dur = sum(sleep_durs);
                
                nrem_idx = find(st_sleep(:,1) == 2);
                if nrem_idx(end) > size(sleep_durs,1)
                    nrem_idx(end) = [];
                end
                nrem_dur = sum(sleep_durs(nrem_idx));
                nrem_percent = 100 * (nrem_dur/total_dur);
                
                rem_idx = find(st_sleep(:,1) == 1);
                if ~isempty(rem_idx)
                    if rem_idx(end) > size(sleep_durs,1)
                        rem_idx(end) = [];
                    end
                    rem_dur = sum(sleep_durs(rem_idx));
                    rem_percent = 100 * (rem_dur/total_dur);
                end     
            catch
                keyboard;
            end
            
            % get ext sleep duration
            sleep_start = st_sleep(1,2);
            sleep_end = st_sleep(end,2);
            ext_sleep_duration = sleep_end - sleep_start;

            % if this ext sleep episode is within the homeostatic recovery
            % window, proceed
            if sleep_start >= homeo_start && sleep_end <= homeo_end
                
                % find number and indices of NREM and REM epochs
                fprintf('good\n');
                NREM_idx = find(st_sleep(:,1) == 2);
                n_NREM = numel(NREM_idx);
                
                REM_idx = find(st_sleep(:,1) == 1);
                n_REM = numel(REM_idx);
                
                idx_NR_first = NREM_idx(1);
                idx_NR_last = NREM_idx(end);
                
                if n_REM > 0
                    idx_REM_first = REM_idx(1);
                    idx_REM_last = REM_idx(end);
                end
                
                all_NREM_zFR{anim_idx,tt} = nan(n_RSU, n_NREM);
                all_NREM_offT{anim_idx,tt} = nan(n_RSU, n_NREM);    
                all_REM_zFR{anim_idx,tt} = nan(n_RSU, n_REM);
                all_REM_offT{anim_idx,tt} = nan(n_RSU, n_REM);    

                % loop through cells
                for cc = 1:n_RSU

                    % get spike times
                    spikes = rsu(cc).time;
                    onTimes = rsu(cc).onTime + daystart*24*3600;
                    offTimes = rsu(cc).offTime + daystart*24*3600;
                    
                    if size(rsu(cc).onTime,1) > 1
                        fprintf('Multiple on/off times.\n');
%                         keyboard;
                    end
                                        
                    % calculate FR according to analysis parameters
                    switch mean_t
                        case 0
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 0;
                            delta_frac = 0;
                        case 1
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 1;
                            delta_frac = 0;
                        case 2
                            mean_long_t0 = rsu(cc).onTime(1);
                            mean_long_t1 = rsu(cc).offTime(end);
                            do_z = 1;
                            delta_frac = 0;
                        case 3
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 0;
                            delta_frac = 1;
                        case 4
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 1;
                            delta_frac = 1; 
                        case 5
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 0;
                            delta_frac = 1; 
                        case 6
                            mean_long_t0 = sleep_start;
                            mean_long_t1 = sleep_end;
                            do_z = 0;
                            do_perc = 1;
                            delta_frac = 1;                               
                    end
                    
                    all_sp_times = spikes + daystart*24*3600;
                    cell_sp_times = [];
                    num_ontimes = length(onTimes);
                    for ii = 1:num_ontimes
                        add_sps = all_sp_times(all_sp_times > onTimes(ii)...
                            & all_sp_times < offTimes(ii));
                        cell_sp_times = [cell_sp_times; add_sps];
                    end       

                    rate_onoff = histc(cell_sp_times,t_start:G_bin:t_stop) ./ G_bin;
                    rate_long = rate_onoff(round(mean_long_t0/G_bin):round(mean_long_t1/G_bin));
                    
                    % apply edge buffer to prevent transition measurements
                    num_edge_bins = round(edge_buffer_sec/G_bin);
                    if num_edge_bins > 0
                        rate_long(1:num_edge_bins) = NaN;
                        rate_long(end-num_edge_bins) = NaN;
                    end

                    % get the mean rate and std dev within the normalizing episode
                    frmean_long = nanmean(rate_long);
                    frstd_long  = std(rate_long,0,'omitnan');

                    if frmean_long < min_period_FR
                        continue
                    end                    
                    
                    % cycle thru NREM epochs and find mean FR in each
                    for nr = 1:n_NREM
                        
                        % find start and end time of current NREM epoch
                        NR_t0 = st_sleep(NREM_idx(nr),2);
                        NR_t1 = st_sleep(NREM_idx(nr)+1,2);

                        % find if epoch in an on time
                        on_yes = 0;
                        for t = 1:length(onTimes)
                            if NR_t0 >=  onTimes(t) && NR_t1 <= offTimes(t) && (NR_t1-NR_t0 >= duration_threshold)
                                on_yes = 1;
                            end
                        end

                        if on_yes
                            % convert time to index according to FR bin size
                            NR_idx0 = floor( (NR_t0-mean_long_t0) / G_bin );
                            if NR_idx0 == 0, NR_idx0 = 1; end
                            NR_idx1 = ceil( (NR_t1-mean_long_t0) / G_bin );  

                            num_nonnan = sum(~isnan(rate_long(NR_idx0:NR_idx1)));
                            on_sec = round(num_nonnan/G_bin);     
                            if on_sec < duration_threshold
                                on_yes = 0;
                            end
                        end

                        if on_yes
                            
                            % find mean FR in this NREM epoch
                            NR_FR = nanmean(rate_long(NR_idx0:NR_idx1));
                            % depending on analysis parameters, z-score or not
                            % NOTE: this will either z-score to the ext
                            % sleep episode or to the whole expt time,
                            % depending on the chosen value of mean_t
                            if do_z
                                NR_zFR = (NR_FR - frmean_long) / frstd_long;
                            else
                                NR_zFR = NR_FR;
                            end
                        else
                            NR_zFR = NaN;
                        end
                        
                        % save NREM FR and time from ext sleep start
                        all_NREM_zFR{anim_idx,tt}(cc,nr) = NR_zFR;
                        all_NREM_offT{anim_idx,tt}(cc,nr) = NR_t0 - sleep_start;
                    end
                    
                    % REPEAT FOR REM
                    % cycle thru REM epochs and find mean FR in each
                    if n_REM > 0
                        for r = 1:n_REM
                            
                            R_t0 = st_sleep(REM_idx(r),2);
                            R_t1 = st_sleep(REM_idx(r)+1,2);
    
                            % find if epoch in an on time
                            on_yes = 0;
                            for t = 1:length(onTimes)
                                if R_t0 >=  onTimes(t) && R_t1 <= offTimes(t) && (R_t1-R_t0 >= duration_threshold)
                                    on_yes = 1;
                                end
                            end

                            if on_yes
                                % convert time to index according to FR bin size
                                R_idx0 = floor( (R_t0-mean_long_t0) / G_bin );
                                if R_idx0 == 0, R_idx0 = 1; end
                                R_idx1 = ceil( (R_t1-mean_long_t0) / G_bin );
    
                                num_nonnan = sum(~isnan(rate_long(R_idx0:R_idx1)));
                                on_sec = round(num_nonnan/G_bin);     
                                if on_sec < duration_threshold
                                    on_yes = 0;
                                end
                            end

                            if on_yes                                          
                                R_FR = nanmean(rate_long(R_idx0:R_idx1));
                                if do_z
                                    R_zFR = (R_FR - frmean_long) / frstd_long;
                                else
                                    R_zFR = R_FR;
                                end
                            else
                                R_zFR = NaN;
                            end
                            
                            all_REM_zFR{anim_idx,tt}(cc,r) = R_zFR;
                            all_REM_offT{anim_idx,tt}(cc,r) = R_t0 - sleep_start;
                            num_REM_eps{anim_idx}(tt,cc) = n_REM;
                        end
                    end
                    
                    % find difference in FR between last NREM and first NREM
                    % set up here depends on chosen value of mean_t
                    if delta_frac ~= 1
                        NR_first_t0 = st_sleep(idx_NR_first,2);
                        NR_first_t1 = st_sleep(idx_NR_first+1,2);
                        NR_last_t0 = st_sleep(idx_NR_last,2);
                        NR_last_t1 = st_sleep(idx_NR_last+1,2);
                        
                        NR_dur_first = NR_first_t1-NR_first_t0;
                        NR_dur_last = NR_last_t1-NR_last_t0;
                    else
                        sleep_dur_frac = dur_frac * ext_sleep_duration;
                        
                        NR_first_t0 = st_sleep(1,2);
                        NR_first_t1 = NR_first_t0 + sleep_dur_frac;
                        NR_last_t1 = st_sleep(end,2);
                        NR_last_t0 = NR_last_t1 - sleep_dur_frac;
                        
                        NR_dur_first = NR_first_t1-NR_first_t0;
                        NR_dur_last = NR_last_t1-NR_last_t0;
                    end
                    
                    % find if epoch in an on time
                    on_yes = 0;
                    if delta_frac ~= 1
                        for t = 1:length(onTimes)
                            if NR_first_t0 >=  onTimes(t) && NR_last_t1 <= offTimes(t) && ...
                                        NR_dur_first >= duration_threshold && NR_dur_last >= duration_threshold
                                on_yes = 1;
                            end
                        end
                    else
                        for t = 1:length(onTimes)
                            if NR_first_t0 >=  onTimes(t) && NR_last_t1 <= offTimes(t)
                                on_yes = 1;
                            end
                        end
                    end

                    if on_yes    
                        switch mean_t
                            case {1,2,3}  
                                % find indices of first and last NR period
                                NR_first_idx0 = floor( (NR_first_t0-mean_long_t0) / G_bin );
                                if NR_first_idx0 == 0, NR_first_idx0 = 1; end
                                NR_first_idx1 = ceil( (NR_first_t1-mean_long_t0) / G_bin );
                                
                                NR_last_idx0 = floor( (NR_last_t0-mean_long_t0) / G_bin );
                                NR_last_idx1 = ceil( (NR_last_t1-mean_long_t0) / G_bin );
                                
                                % find men rate in each one
                                NR_first_FR = nanmean(rate_long(NR_first_idx0:NR_first_idx1));
                                NR_last_FR = nanmean(rate_long(NR_last_idx0:NR_last_idx1));
                            otherwise
                                NR_first_inds = [];
                                NR_last_inds = [];
                                for n_i = 1:n_NREM
                                    n_i_first = st_sleep(NREM_idx(n_i),2);
                                    n_i_last = st_sleep(NREM_idx(n_i)+1,2);
                                    if (n_i_first <= (mean_long_t0 + sleep_dur_frac))
                                        NR_first_idx0 = floor( (n_i_first-mean_long_t0) / G_bin );
                                        if NR_first_idx0 == 0, NR_first_idx0 = 1; end
                                        NR_first_idx1 = ceil( (n_i_last-mean_long_t0) / G_bin );
                                        NR_first_inds = [NR_first_inds, NR_first_idx0:NR_first_idx1];
                                    end
                                    if (n_i_last >= (mean_long_t1 - sleep_dur_frac))
                                        NR_last_idx0 = floor( (n_i_first-mean_long_t0) / G_bin );
                                        NR_last_idx1 = ceil( (n_i_last-mean_long_t0) / G_bin );
                                        NR_last_inds = [NR_last_inds, NR_last_idx0:NR_last_idx1];
                                    end
                                end
    
                                NR_first_inds(NR_first_inds > round(sleep_dur_frac/G_bin)) = [];
                                NR_last_inds(NR_last_inds < round((length(rate_long) - sleep_dur_frac)/G_bin)) = [];
                                
                                if ((length(NR_first_inds)/G_bin) > duration_threshold) && ...
                                                ((length(NR_last_inds)/G_bin) > duration_threshold)
                                    NR_first_FR = nanmean(rate_long(NR_first_inds));
                                    NR_last_FR = nanmean(rate_long(NR_last_inds));                                
                                else
                                    NR_first_FR = NaN;
                                    NR_last_FR = NaN;
                                end
                        end

                        % depending on mean_t, do z-scoring or not
                        if do_z
                            NR_first_zFR = (NR_first_FR - frmean_long) / frstd_long;
                            NR_last_zFR = (NR_last_FR - frmean_long) / frstd_long;
                        else
                            NR_first_zFR = NR_first_FR;
                            NR_last_zFR = NR_last_FR;
                        end
                        
                        % if doing the fractional method, do this
                        if delta_frac == 1 && (mean_t == 3 || mean_t == 5)
                            NR_delta_zFR = NR_last_zFR / (NR_first_zFR);
                            if NR_delta_zFR == Inf || NR_delta_zFR == 0
                                NR_delta_zFR = NaN;
                            end
                        elseif do_perc
                            NR_delta_zFR = 100*(NR_last_FR - NR_first_zFR) / NR_first_zFR;
                        else
                            NR_delta_zFR = NR_last_zFR - NR_first_zFR;
                        end
                    else
                        NR_delta_zFR = NaN;
                    end
                    % compile data
                    deltaFR_NREM{anim_idx}(tt,cc) = NR_delta_zFR;
                    all_sleep_dur{anim_idx}(tt,cc) = ext_sleep_duration;
                    sleep_starts{anim_idx}(tt,cc) = sleep_start;

                    % find difference in FR between last REM and first REM
                    if n_REM > 0 % if there are any REM periods
                        if delta_frac ~= 1
                            R_first_t0 = st_sleep(idx_REM_first,2);
                            R_first_t1 = st_sleep(idx_REM_first+1,2);
                            R_last_t0 = st_sleep(idx_REM_last,2);
                            R_last_t1 = st_sleep(idx_REM_last+1,2);
                            
                            R_dur_first = R_first_t1 - R_first_t0;
                            R_dur_last = R_last_t1 - R_last_t0;
                        else
                            sleep_dur_frac = dur_frac * ext_sleep_duration;
                            
                            R_first_t0 = st_sleep(1,2);
                            R_first_t1 = R_first_t0 + sleep_dur_frac;
                            R_last_t1 = st_sleep(end,2);
                            R_last_t0 = R_last_t1 - sleep_dur_frac;

                        end

                        % find if epoch in an on time
                        on_yes = 0;
                        if delta_frac ~= 1
                            for t = 1:length(onTimes)
                                if R_first_t0 >=  onTimes(t) && R_last_t1 <= offTimes(t) && ...
                                            R_dur_first >= duration_threshold && R_dur_last >= duration_threshold
                                    on_yes = 1;
                                end
                            end
                        else
                            for t = 1:length(onTimes)
                                if R_first_t0 >=  onTimes(t) && R_last_t1 <= offTimes(t)
                                    on_yes = 1;
                                end
                            end
                        end                        
    
                        if on_yes    
                            switch mean_t
                                case {1,2,3}    
                                    R_first_idx0 = floor( (R_first_t0-mean_long_t0) / G_bin );
                                    if R_first_idx0 == 0, R_first_idx0 = 1; end
                                    R_first_idx1 = ceil( (R_first_t1-mean_long_t0) / G_bin );
                                    
                                    R_last_idx0 = floor( (R_last_t0-mean_long_t0) / G_bin );
                                    R_last_idx1 = ceil( (R_last_t1-mean_long_t0) / G_bin );
                                    
                                    R_first_FR = nanmean(rate_long(R_first_idx0:R_first_idx1));
                                    R_last_FR = nanmean(rate_long(R_last_idx0:R_last_idx1));
                                otherwise
                                    R_first_inds = [];
                                    R_last_inds = [];
                                    for r_i = 1:n_REM
                                        r_i_first = st_sleep(REM_idx(r_i),2);
                                        r_i_last = st_sleep(REM_idx(r_i)+1,2);
                                        if (r_i_first <= (mean_long_t0 + sleep_dur_frac))
                                            R_first_idx0 = floor( (r_i_first-mean_long_t0) / G_bin );
                                            if R_first_idx0 == 0, R_first_idx0 = 1; end
                                            R_first_idx1 = ceil( (r_i_last-mean_long_t0) / G_bin );
                                            R_first_inds = [R_first_inds, R_first_idx0:R_first_idx1];
                                        end
                                        if (r_i_last >= (mean_long_t1 - sleep_dur_frac))
                                            R_last_idx0 = floor( (r_i_first-mean_long_t0) / G_bin );
                                            R_last_idx1 = ceil( (r_i_last-mean_long_t0) / G_bin );
                                            R_last_inds = [R_last_inds, R_last_idx0:R_last_idx1];
                                        end
                                    end
        
                                    R_first_inds(R_first_inds > round(sleep_dur_frac/G_bin)) = [];
                                    R_last_inds(R_last_inds < round((length(rate_long) - sleep_dur_frac)/G_bin)) = [];
                                    
                                    if ((length(R_first_inds)/G_bin) > duration_threshold) && ...
                                                    ((length(R_last_inds)/G_bin) > duration_threshold)
                                        R_first_FR = nanmean(rate_long(R_first_inds));
                                        R_last_FR = nanmean(rate_long(R_last_inds));                                
                                    else
                                        R_first_FR = NaN;
                                        R_last_FR = NaN;
                                    end
        
                                    if cc == 1
                                        if loop_plot_on == 1
                                            figure; hold on;
                                            plot(rate_long,'color',[0.5 0.5 0.5])
        
                                            if n_REM > 0
                                                plot(R_first_inds,rate_long(R_first_inds),'color',c_rem)
                                                plot(R_last_inds,rate_long(R_last_inds),'color',c_rem)
                                            end
                                            plot(NR_first_inds,rate_long(NR_first_inds),'color',c_nrem)
                                            plot(NR_last_inds,rate_long(NR_last_inds),'color',c_nrem)      
                                            plot([sleep_dur_frac sleep_dur_frac],[0,max(rate_long)],'k')
                                            plot([length(rate_long) - sleep_dur_frac length(rate_long) - sleep_dur_frac],...
                                                [0,max(rate_long)],'k')
                                            ylabel('FR')
                                            title('NREM and REM FR - mean_t = 4')
                                        end
                                    end
                            end

                            if do_z
                                R_first_zFR = (R_first_FR - frmean_long) / frstd_long;
                                R_last_zFR = (R_last_FR - frmean_long) / frstd_long;
                            else
                                R_first_zFR = R_first_FR;
                                R_last_zFR = R_last_FR;
                            end
                            
                            if delta_frac == 1 && (mean_t == 3 || mean_t == 5)
                                R_delta_zFR = R_last_zFR / R_first_zFR;
                            elseif do_perc
                                R_delta_zFR = 100*(R_last_zFR - R_first_zFR) / R_first_zFR;                            
                            else
                                R_delta_zFR = R_last_zFR - R_first_zFR;
                            end
                        else
                            R_delta_zFR = NaN;
                        end
                        deltaFR_REM{anim_idx}(tt,cc) = R_delta_zFR;
                    end
                    
                    percent_NREM{anim_idx}(tt,cc) = nrem_percent;
                    if n_REM > 0
                        percent_REM{anim_idx}(tt,cc) = rem_percent;
                    end
                end
                
            else
                fprintf('bad\n');
                all_NREM_zFR{anim_idx,tt} = NaN;
                all_REM_zFR{anim_idx,tt} = NaN;
                all_NREM_offT{anim_idx,tt} = NaN;
                all_REM_offT{anim_idx,tt} = NaN;
                
            end
        end
    end
end


%% compile the data
% change in FR between first and last NREM
NREM_all_deltas = cellfun(@(x) x(:),deltaFR_NREM,'UniformOutput',false);
cat_NREM_deltas = cat(1,NREM_all_deltas{:});
switch mean_t
    case {1,2,4}
        % different treshold?
    case {3,5}
        cat_NREM_deltas(cat_NREM_deltas > max_FR_dur_frac_Delta) = NaN; % check effect of this
    case {6}
        cat_NREM_deltas(cat_NREM_deltas > max_FR_perc_Delta) = NaN; % check effect of this
end
delta_nonans_NREM = ~isnan(cat_NREM_deltas);
NREM_delta_nonan = cat_NREM_deltas(delta_nonans_NREM);
NREM_delta_nonan(NREM_delta_nonan==Inf) = NaN;

for aa = 1:length(NREM_all_deltas)
    animal = anim_fields{aa};
    anim_ds = NREM_all_deltas{aa};
%     anim_ds(anim_ds > 5) = NaN;
    mean_d = nanmean(anim_ds);
    disp(['Anim=',animal,' mean NREMdelta=',num2str(mean_d)])
end

figure;
hist(NREM_delta_nonan,100)
title('NREM delta hist')

% change in FR between first and last REM
REM_all_deltas = cellfun(@(x) x(:),deltaFR_REM,'UniformOutput',false);
cat_REM_deltas = cat(1,REM_all_deltas{:});
switch mean_t
    case {1,2,4}
        % different treshold?
    case {3,5}
        cat_REM_deltas(cat_REM_deltas > max_FR_dur_frac_Delta) = NaN; % check effect of this
    case {6}
        cat_REM_deltas(cat_REM_deltas > max_FR_perc_Delta) = NaN; % check effect of this
end
delta_nonans_REM = ~isnan(cat_REM_deltas);
REM_delta_nonan = cat_REM_deltas(delta_nonans_REM);
REM_delta_nonan(REM_delta_nonan==Inf) = NaN;

for aa = 1:length(REM_all_deltas)
    animal = anim_fields{aa};
    anim_ds = REM_all_deltas{aa};
%     anim_ds(anim_ds > 5) = NaN;
    mean_d = nanmean(anim_ds);
    disp(['Anim=',animal,' mean REMdelta=',num2str(mean_d)])
end

% figure;
% hist(REM_delta_nonan,100)
% title('REM delta hist')

% ext sleep durations
all_sleep_dur_cellcat = cellfun(@(x) x(:),all_sleep_dur,'UniformOutput',false);
cat_sleep_dur = cat(1,all_sleep_dur_cellcat{:});
sleepdur_nonan = cat_sleep_dur(delta_nonans_NREM);
sleepdur_nonan_REM = cat_sleep_dur(delta_nonans_REM);
sleepdur_nonan_NREM = cat_sleep_dur(delta_nonans_NREM);

sleep_start_cellcat = cellfun(@(x) x(:),sleep_starts,'UniformOutput',false);
cat_sleep_starts = cat(1,sleep_start_cellcat{:});
sleep_starts_nonan_NREM = cat_sleep_starts(delta_nonans_NREM);
sleep_starts_nonan_REM = cat_sleep_starts(delta_nonans_REM);

% percent time in NREM
NREM_all_percs = cellfun(@(x) x(:),percent_NREM,'UniformOutput',false);
cat_NREM_percs = cat(1,NREM_all_percs{:});
% delta_nonans_NREM = ~isnan(cat_NREM_deltas);
NREM_perc_nonan = cat_NREM_percs(delta_nonans_NREM);

% percent time in REM
REM_all_percs = cellfun(@(x) x(:),percent_REM,'UniformOutput',false);
cat_REM_percs = cat(1,REM_all_percs{:});
% delta_nonans_REM = ~isnan(cat_REM_deltas);
REM_perc_nonan = cat_REM_percs(delta_nonans_REM);

% number of REM episodes
num_REM_all = cellfun(@(x) x(:),num_REM_eps,'UniformOutput',false);
cat_REM_num = cat(1,num_REM_all{:});

% sleep durations by cell - useful for later analysis
sleepdur_bycell = cellfun(@(x) nanmean(x,2),all_sleep_dur,'UniformOutput',false);
sleepdur_bycell_cat = cat(1,sleepdur_bycell{:});

% compile by cell
% NREM data averaged across epochs for a given cell
NREM_cellcat = cellfun(@(x) nanmean(x,2),deltaFR_NREM,'UniformOutput',false);
NREM_cellcat_sem = cellfun(@(x) nanstd(x,[],2) ./ sqrt(sum(~isnan(x),2)),deltaFR_NREM,'UniformOutput',false);
NREM_perccat = cellfun(@(x) nanmean(x,2),percent_NREM,'UniformOutput',false);

% collecting all epochs instead of averaging by cell
NREM_cellmean = cat(1,NREM_cellcat{:});
NREM_cellsem = cat(1,NREM_cellcat_sem{:});
NREM_cellperc = cat(1,NREM_perccat{:});
NREM_all_percent = NREM_cellperc(~isnan(NREM_cellmean));
NREM_all_deltaFR = NREM_cellmean(~isnan(NREM_cellmean));
NREM_all_deltaSEM = NREM_cellsem(~isnan(NREM_cellmean));
sleepdur_bycell_nonan = sleepdur_bycell_cat(~isnan(NREM_cellmean));
n_epochs_NREM = sum(~isnan(NREM_cellmean));


% as above but for REM
REM_cellcat = cellfun(@(x) nanmean(x,2),deltaFR_REM,'UniformOutput',false);
REM_perccat = cellfun(@(x) nanmean(x,2),percent_REM,'UniformOutput',false);
REM_cellmean = cat(1,REM_cellcat{:});
REM_cellperc = cat(1,REM_perccat{:});
REM_all_percent = REM_cellperc(~isnan(REM_cellmean));
REM_all_deltaFR = REM_cellmean(~isnan(REM_cellmean));
n_epochs_REM = sum(~isnan(REM_cellmean));

% average across cells - NREM and REM
NREM_mean_c = nanmean(NREM_cellmean);
NREM_sem_c = std(NREM_cellmean,0,'omitnan') / sqrt(n_epochs_NREM - 1);
NREM_mean = nanmean(NREM_delta_nonan);
NREM_sem = std(NREM_delta_nonan,0,'omitnan') / sqrt(sum(~isnan(NREM_delta_nonan)) - 1);

REM_mean_c = nanmean(REM_cellmean);
REM_sem_c = std(REM_cellmean,0,'omitnan') / sqrt(n_epochs_REM - 1);
REM_mean = nanmean(REM_delta_nonan);
REM_sem = std(REM_delta_nonan,0,'omitnan') / sqrt(sum(~isnan(REM_delta_nonan)) - 1);

%% z-scored FR vs time from start of ext sleep
% compile the data
cellcat_NREM_offT = cellfun(@(x) x(:),all_NREM_offT,'UniformOutput',false);
cellcat_NREM_zFR = cellfun(@(x) x(:),all_NREM_zFR,'UniformOutput',false);

cat_NREM_offT = cat(1,cellcat_NREM_offT{:});
cat_NREM_zFR = cat(1,cellcat_NREM_zFR{:});

fr_notnans = find(~isnan(cat_NREM_zFR));
offT_notnans = find(~isnan(cat_NREM_offT));
inds_notnans = intersect(fr_notnans,offT_notnans);

NREM_offT_nonan = cat_NREM_offT(inds_notnans);
NREM_zFR_nonan = cat_NREM_zFR(inds_notnans);

% this is the whole data set - lots of points!
all_data = [NREM_zFR_nonan NREM_offT_nonan];
all_data_sort = sortrows(all_data,2);

% separate into ngroups of equal size (equal # of datapoints per group)
ngroups = 10;
group_split = round(linspace(0,numel(NREM_offT_nonan),ngroups+1));
for uu = 1:ngroups
    this_group = all_data_sort(group_split(uu)+1 : group_split(uu+1), 1);
    group_means(uu) = nanmean(this_group);
    group_sem(uu) = std(this_group,0,'omitnan') / sqrt(numel(this_group)-1);
    group_means_offT(uu) = nanmean(all_data_sort(group_split(uu)+1 : group_split(uu+1), 2));
end

% do the correlation analysis
[nr_rho,nr_p_rho] = corr(NREM_zFR_nonan, NREM_offT_nonan, 'Type', corr_type);
nr_asterisks = get_asterisks_from_pval(nr_p_rho);
nr_lincoeff = polyfit(NREM_offT_nonan, NREM_zFR_nonan, 1);

%% DO PLOTTING
% for mean_t different than 3 (i.e. no fractional change)
switch mean_t
    case {1,2,4}
        % DO THE PLOTS
        
        %% Fig - NREM FR vs time correlation
        markersize = 4;
        mylims = 1;
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .3 .8]);
        subplot(2,1,1);
        scatter(NREM_offT_nonan,NREM_zFR_nonan,markersize^2,c_nrem,'filled');

        hold on;
        % axes formatting
        if mylims
            xlims = [-500 7000];
            ylims = [-2 2];
            xl2 = [-250 4000];
            yl2 = [-0.2 0.4];
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):10:xlims(end);
        Y = nr_lincoeff(2) + nr_lincoeff(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        set(gca,'xlim',xlims,'ylim',ylims);
        ylabel('Firing rate (z)','fontsize',21);
        title('Ext. Sleep change in FR during NREM - scatter','fontsize',18);
        
        % grouped subplot
        subplot(2,1,2);
        mfc = c_nrem;
        errorbar(group_means_offT,group_means,group_sem,'o','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_nrem);
        hold on;
        box off
        plot(X,Y,'--k','linewidth',1.5);
        if mylims
            set(gca,'xlim',xl2,'ylim',yl2);
            text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',nr_rho,nr_p_rho),'fontsize',16);
        end
        ylabel('Firing rate (z)','fontsize',21);
        xlabel('Time from start of extended sleep (s)','fontsize',20);
        
        %% Fig - REM FR vs time correlation
        % everything as above, but for REM
        cellcat_REM_offT = cellfun(@(x) x(:),all_REM_offT,'UniformOutput',false);
        cellcat_REM_zFR = cellfun(@(x) x(:),all_REM_zFR,'UniformOutput',false);
        
        cat_REM_offT = cat(1,cellcat_REM_offT{:});
        cat_REM_zFR = cat(1,cellcat_REM_zFR{:});
        
        REM_fr_notnans = find(~isnan(cat_REM_zFR));
        offT_notnans = find(~isnan(cat_REM_offT));
        inds_notnans = intersect(REM_fr_notnans,offT_notnans);
    
        REM_offT_nonan = cat_REM_offT(inds_notnans);
        REM_zFR_nonan = cat_REM_zFR(inds_notnans);
        
        REM_all_data = [REM_zFR_nonan REM_offT_nonan];
        REM_all_data_sort = sortrows(REM_all_data,2);
        
        % ngroups is inherited from above to ensure consistency between NREM
        % and REM analyses
        REM_group_split = round(linspace(0,numel(REM_offT_nonan),ngroups+1));
        for uu = 1:ngroups
            REM_this_group = REM_all_data_sort(REM_group_split(uu)+1 : REM_group_split(uu+1), 1);
            REM_group_means(uu) = nanmean(REM_this_group);
            REM_group_sem(uu) = std(REM_this_group,0,'omitnan') / sqrt(numel(REM_this_group)-1);
            REM_group_means_offT(uu) = nanmean(REM_all_data_sort(REM_group_split(uu)+1 : REM_group_split(uu+1), 2));
        end
        
        
        % do the correlation
        [rho,p_rho] = corr(REM_offT_nonan, REM_zFR_nonan, 'Type', corr_type);
        asterisks = get_asterisks_from_pval(p_rho);
        lincoeff = polyfit(REM_offT_nonan, REM_zFR_nonan, 1);
        
        %% plotting
        markersize = 4;
        mylims = 1;
        
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .3 .8]);
        subplot(2,1,1);
        scatter(REM_offT_nonan,REM_zFR_nonan,markersize^2,c_rem,'filled');

        hold on;
        if mylims
            xlims = [-500 7000];
            ylims = [-2 2];
            xl2 = [-250 4000];
            yl2 = [-0.2 0.4];
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):10:xlims(end);
        Y = lincoeff(2) + lincoeff(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        set(gca,'xlim',xlims,'ylim',ylims);
        ylabel('Firing rate (z)','fontsize',21);
        title('Ext. Sleep change in FR during REM - scatter','fontsize',18);
    
        mfc = c_rem;
        subplot(2,1,2);
        errorbar(REM_group_means_offT,REM_group_means,REM_group_sem,'o','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'color',c_rem,'linewidth',1.5);
        hold on;
        box off;
        plot(X,Y,'--k','linewidth',1.5);
        if mylims
            set(gca,'xlim',xl2,'ylim',yl2);
            text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',rho,p_rho),'fontsize',16);
        end
        ylabel('Firing rate (z)','fontsize',21);
        xlabel('Time from start of extended sleep (s)','fontsize',20);
        
        %% Fig - plotting the first-last change
        mylims = 1;
        
        % STATS - t-test versus no change (mean = 0)
        [~,p_nr] = ttest(NREM_delta_nonan,0);
        [a_nr,fsz_nr] = get_asterisks_from_pval(p_nr);
        [~,p_rem] = ttest(REM_delta_nonan);
        [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
        
        dfig = figure();
        set(dfig,'position',[.1 .2 .25 .4]);
        box off
        hold on;
        bw = .3;
        csz = 22;
        mfc1 = c_nrem;
        mfc2 = c_rem;
        ec1 = 'none';
        ec2 = 'none';

        % plot the bars
        nr_bar = bar(1,NREM_mean,bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
        nr_err = errorbar(1,NREM_mean,NREM_sem,'linestyle','none','capsize',csz,...
            'color',c_nrem,'linewidth',2);
        rem_bar = bar(2,REM_mean,bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
        rem_err = errorbar(2,REM_mean,REM_sem,'linestyle','none','capsize',csz,...
            'color',c_rem,'linewidth',2);
        if mylims
            xl = [.5 2.5];
            yl = [-0.2 0.2];
            yt = -0.8:.1:0.8;
        else
            xl = get(gca,'xlim');
            yl = get(gca,'ylim');
            yt = get(gca,'ytick');
        end
        text(.75,0.1,sprintf('p = %.4f',p_nr),'fontsize',16);
        text(1.75,0.1,sprintf('p = %.4f',p_rem),'fontsize',16);
        set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'NREM','REM'},...
            'ytick',yt);
        ylabel('Firing rate (z)','fontsize',22);
        title('Ext. Sleep delta FR by state','fontsize',18);
        
        %% CORRELATION BETWEEN DELTA FR AND CIRCADIAN TIME
        
        sleep_starts_CIRC_REM = mod(sleep_starts_nonan_REM./3600, 24);
        sleep_starts_CIRC_NREM = mod(sleep_starts_nonan_NREM./3600, 24);
        
        sleep_ends_CIRC_REM = sleep_starts_CIRC_REM + sleepdur_nonan_REM/3600;
        sleep_ends_CIRC_NREM = sleep_starts_CIRC_NREM + sleepdur_nonan_NREM/3600;
        
        %% calculate light vs dark circ data bins
        CIRC_REM_this_group = {};
        CIRC_NREM_this_group = {};
        CIRC_REM_group_means = [];
        CIRC_REM_group_sem = [];
        CIRC_NREM_group_means = [];
        CIRC_NREM_group_sem = [];
        CIRC_group_means_offT = [];
        
        CIRC_group_split = 0 : 12 : 24;
        ngroups = numel(CIRC_group_split)-1;
        for uu = 1:ngroups
            
            g0 = CIRC_group_split(uu);
            g1 = CIRC_group_split(uu+1);
            CIRC_REM_this_group_idx = find(sleep_starts_CIRC_REM >= g0 & sleep_ends_CIRC_REM < g1);
            CIRC_NREM_this_group_idx = find(sleep_starts_CIRC_NREM >= g0 & sleep_ends_CIRC_NREM < g1);
            CIRC_REM_this_group{uu} = REM_delta_nonan(CIRC_REM_this_group_idx);
            CIRC_NREM_this_group{uu}= NREM_delta_nonan(CIRC_NREM_this_group_idx);
            CIRC_REM_group_means(uu) = nanmean(CIRC_REM_this_group{uu});
            CIRC_REM_group_sem(uu) = std(CIRC_REM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_REM_this_group{uu})-1);
            CIRC_NREM_group_means(uu) = nanmean(CIRC_NREM_this_group{uu});
            CIRC_NREM_group_sem(uu) = std(CIRC_NREM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_NREM_this_group{uu})-1);
            CIRC_group_means_offT(uu) = mean([g0,g1]);
        end
    
        %% Fig - plotting the first-last change - Light vs dark
        mylims = 1;
        
        for per_num = 1:length(CIRC_group_split)-1

            [~,p_rem] = ttest(CIRC_REM_this_group{per_num});
            [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            [~,p_nrem] = ttest(CIRC_NREM_this_group{per_num});
            [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            
            dfig = figure();
            set(dfig,'position',[.1 .2 .25 .4]);
            box off
            hold on;
            bw = .3;
            csz = 20;
            mfc1 = c_rem;
            mfc2 = c_nrem;
            ec1 = 'none';
            ec2 = 'none';
        
            rem_bar = bar(2,CIRC_REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            rem_err = errorbar(2,CIRC_REM_group_means(per_num),CIRC_REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(1,CIRC_NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(1,CIRC_NREM_group_means(per_num),CIRC_NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
            if mylims
                xl = [.5 2.5];
                yl = [-0.2 0.3];
                yt = -0.2:.1:0.3;
            else
                xl = get(gca,'xlim');
                yl = get(gca,'ylim');
                yt = get(gca,'ytick');
            end
            text(.75,-0.15,sprintf('p = %.4f',p_nr),'fontsize',16);
            text(1.75,-0.15,sprintf('p = %.4f',p_rem),'fontsize',16);
            set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'NREM','REM'},...
                'ytick',yt);
            ylabel('Firing rate (z)','fontsize',22);
      
            if per_num == 1
                title({['Ext. Sleep delta FR by state'],...
                    ['- Light Period']},'fontsize',16);
            else
                title({['Ext. Sleep delta FR by state'],...
                    ['- Dark Period']},'fontsize',16);
            end
        end
    
        sleep_starts_CIRC = mod(sleep_starts_nonan_NREM./3600, 24);
        sleep_starts_CIRC_REM = mod(sleep_starts_nonan_REM./3600, 24);
        
        CIRC_group_split = 0 : 3 : 24;
        ngroups = numel(CIRC_group_split)-1;
        for uu = 1:ngroups
            
            g0 = CIRC_group_split(uu);
            g1 = CIRC_group_split(uu+1);
            CIRC_NR_this_group_idx = find(sleep_starts_CIRC >= g0 & sleep_starts_CIRC < g1);
            CIRC_REM_this_group_idx = find(sleep_starts_CIRC_REM >= g0 & sleep_starts_CIRC_REM < g1);
            CIRC_NR_this_group = NREM_delta_nonan(CIRC_NR_this_group_idx);
            CIRC_REM_this_group = REM_delta_nonan(CIRC_REM_this_group_idx);
            CIRC_NR_group_means(uu) = nanmean(CIRC_NR_this_group);
            CIRC_NR_group_sem(uu) = std(CIRC_NR_this_group,0,'omitnan') / sqrt(numel(CIRC_NR_this_group)-1);
            CIRC_REM_group_means(uu) = nanmean(CIRC_REM_this_group);
            CIRC_REM_group_sem(uu) = std(CIRC_REM_this_group,0,'omitnan') / sqrt(numel(CIRC_REM_this_group)-1);
            CIRC_group_means_offT(uu) = mean([g0,g1]);
        end
        
        
        [r_circ,p_circ] = corr(sleep_starts_CIRC, NREM_delta_nonan, 'Type', corr_type);
        a_circ = get_asterisks_from_pval(p_circ);
        l_circ = polyfit(sleep_starts_CIRC, NREM_delta_nonan, 1);
        
        markersize = 5;
        mylims = 1;
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .5 .5]);
        scatter(sleep_starts_CIRC,NREM_delta_nonan,markersize^2,[.7 .7 .7],'filled');

        hold on;
        if mylims
            xlims = [-1 25];
            ylims = [-1.5 1];
            xl2 = [-1 25];
            yl2 = [-.5 .2];
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):1:xlims(end);
        Y = l_circ(2) + l_circ(1).*X;
        plot(X,Y,'--k','linewidth',1.5);

        mfc = c_nrem;
        errorbar(CIRC_group_means_offT,CIRC_NR_group_means,CIRC_NR_group_sem,'s','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_nrem);
        text(xlims(2)*.8,ylims(2)*.9,sprintf('r = %.3f\np = %.3f',r_circ,p_circ),'fontsize',16);
        set(gca,'xlim',xlims,'ylim',ylims,'xtick',0:3:24);
        ylabel('\Delta Firing rate (z)','fontsize',21);
        xlabel('ZT time','fontsize',19);
        title('Ext. Sleep deltaFr NREM by ZT','fontsize',18);
    
        
        %% CORRELATION BETWEEN DELTA FR AND CIRCADIAN TIME IN REM
        
        sleep_starts_CIRC_REM = mod(sleep_starts_nonan_REM./3600, 24);
        
        [r_circ_REM,p_circ_REM] = corr(sleep_starts_CIRC_REM, REM_delta_nonan, 'Type', corr_type);
        a_circ_REM = get_asterisks_from_pval(p_circ_REM);
        l_circ_REM = polyfit(sleep_starts_CIRC_REM, REM_delta_nonan, 1);
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .5 .75]);
        subplot(2,1,1);
    %     if dep
        scatter(sleep_starts_CIRC_REM,REM_delta_nonan,markersize^2,c_rem,'filled');

        hold on;
        if mylims
            xlims = [-1 25];
            ylims = [-2 2];
            xl2 = [-1 25];
            yl2 = [-0.5 0.2];
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):1:xlims(end);
        Y = l_circ_REM(2) + l_circ_REM(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        text(xlims(2)*.8,ylims(2)*.9,sprintf('r = %.3f\np = %.3f',r_circ_REM,p_circ_REM),'fontsize',16);
        set(gca,'xlim',xlims,'ylim',ylims,'xtick',0:4:24);
        ylabel('\Delta Firing rate (z)','fontsize',21);
        xlabel('ZT time');
        title('Ext. Sleep deltaFr REM by ZT','fontsize',18);
        
        subplot(2,1,2);
    %     if dep
        mfc = c_rem;
    %     else
    %         mfc = 'none';
    %     end
        errorbar(CIRC_group_means_offT,CIRC_REM_group_means,CIRC_REM_group_sem,'o','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_rem);
        hold on;
        box off
        plot(X,Y,'--k','linewidth',1.5);
        if mylims
            set(gca,'xlim',xl2,'ylim',yl2);
            text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',r_circ_REM,p_circ_REM),'fontsize',16);
        end
        ylabel('\Delta Firing rate (z)','fontsize',21);
        xlabel('ZT time','fontsize',20);
        set(gca,'xtick',0:3:24);
        
        %%
        [r_cd,p_cd] = corr(sleep_starts_CIRC, sleepdur_nonan);
        a_cd = get_asterisks_from_pval(p_cd);
        l_cd = polyfit(sleep_starts_CIRC, sleepdur_nonan, 1);
        
        markersize = 7;
        mylims = 1;
        
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .25 .8]);
        subplot(2,1,1);
    %     if dep
        scatter(sleep_starts_CIRC,sleepdur_nonan,markersize^2,c_nrem,'filled');
    %     else
    %         scatter(sleep_starts_CIRC,sleepdur_nonan,markersize^2,c_nrem);
    %     end
        hold on;
        if mylims
            xlims = [-1 25];
            ylims = [0 11000];
            xl2 = [0 60];
            yl2 = [-2 2];
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):1:xlims(end);
        Y = l_cd(2) + l_cd(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        text(xlims(2)*.8,ylims(2)*.9,sprintf('r = %.3f\np = %.3f',r_cd,p_cd),'fontsize',16);
        set(gca,'xlim',xlims,'ylim',ylims,'xtick',0:4:24);
        ylabel('Duration','fontsize',21);
        xlabel('ZT time','fontsize',19);
        title('Ext. Sleep Duration by ZT','fontsize',18);
    
    
        %% delta changes vs. binned time post hunt
    
        sleep_starts_REM = sleep_starts_nonan_REM./3600;
        sleep_starts_NREM = sleep_starts_nonan_NREM./3600;
        
        sleep_ends_REM = sleep_starts_REM + sleepdur_nonan_REM/3600;
        sleep_ends_NREM = sleep_starts_NREM + sleepdur_nonan_NREM/3600;
    
        %% calculate light vs dark circ data bins
        REM_this_group = {};
        NREM_this_group = {};
        REM_group_means = [];
        REM_group_sem = [];
        NREM_group_means = [];
        NREM_group_sem = [];
        group_means_offT = [];
        
        group_hrs = 24;
        group_split = post_hunt_hr : group_hrs : 6.5*24;
        ngroups = numel(group_split)-1;
        for uu = 1:ngroups
            
            g0 = group_split(uu);
            g1 = group_split(uu+1);
            REM_this_group_idx = find(sleep_starts_REM >= g0 & sleep_ends_REM < g1);
            NREM_this_group_idx = find(sleep_starts_NREM >= g0 & sleep_ends_NREM < g1);
            REM_this_group{uu} = REM_delta_nonan(REM_this_group_idx);
            NREM_this_group{uu}= NREM_delta_nonan(NREM_this_group_idx);
            REM_group_means(uu) = nanmean(REM_this_group{uu});
            REM_group_sem(uu) = std(REM_this_group{uu},0,'omitnan') / sqrt(numel(REM_this_group{uu})-1);
            NREM_group_means(uu) = nanmean(NREM_this_group{uu});
            NREM_group_sem(uu) = std(NREM_this_group{uu},0,'omitnan') / sqrt(numel(NREM_this_group{uu})-1);
            group_means_offT(uu) = mean([g0,g1]);
        end
    
        dfig = figure();
        set(dfig,'position',[0.0120 0.3019 0.3885 0.3667]);
        box off
        hold on;
        bw = .3;
        csz = 20;
        mfc1 = c_rem;
        mfc2 = c_nrem;
        ec1 = 'none';
        ec2 = 'none';    
        mylims = 0;
        for per_num = 1:length(group_split)-1
            %light group == 1
    %         per_num = 1;
            
            if ~isempty(REM_this_group{per_num})
                [~,p_rem] = ttest(REM_this_group{per_num});
    %             [a_aw,fsz_aw] = get_asterisks_from_pval(p_aw);
            else
                p_rem = 'nan';
            end
            if ~isempty(NREM_this_group{per_num})
                [~,p_nrem] = ttest(NREM_this_group{per_num});
    %             [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            else
                p_nrem = 'nan';
            end
            
            bar_x1 = (per_num-1)*2 + 1;
            bar_x2 = (per_num-1)*2 + 2;
    
            REM_bar = bar(bar_x1,REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            REM_err = errorbar(bar_x1,REM_group_means(per_num),REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(bar_x2,NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(bar_x2,NREM_group_means(per_num),NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
    
            text(bar_x1,0.05,sprintf('p = %.4f',p_rem),'fontsize',12,'rotation',45);
            text(bar_x2,0.05,sprintf('p = %.4f',p_nrem),'fontsize',12,'rotation',45);
            ylabel('Firing rate (z)','fontsize',22);
    
    %         if per_num == 1
    %             title({['Ext. sleep delta FR by state'],...
    %                 ['- Light Period']},'fontsize',16);
    %         else
    %             title({['Ext. sleep delta FR by state'],...
    %                 ['- Dark Period']},'fontsize',16);
    %         end
        end
    
        post_hunt_hrs = group_split+group_hrs/2 - post_hunt_hr;
        set(gca,'xtick',1.5:2:length(group_split)*2,'xticklabel',post_hunt_hrs)
        ylim([-0.2 0.2])
        xlabel('Hours post hunt')
        title('FR change by state post hunt')






    case {3,5}
        %%
        % for fractional changes against duration time corr plots
        % loop through and normalize changes to first NREM/REM
        REM_offT_nonan = [];
        REM_dFR_nonan = [];
        NREM_offT_nonan = [];
        NREM_dFR_nonan = [];
        for anim_i = 1:size(all_NREM_zFR,1)
            for tt = 1:size(all_NREM_zFR,2)
                NREM_wake_per = all_NREM_zFR{anim_i,tt};
                REM_wake_per = all_REM_zFR{anim_i,tt};
                NREM_wake_perT = all_NREM_offT{anim_i,tt};
                REM_wake_perT = all_REM_offT{anim_i,tt};                

                if isnan(NREM_wake_per)
                    continue
                end
                
                if size(NREM_wake_per,2) < 2
                    continue
                end

                NREM_wake_per(NREM_wake_per<min_FR_dur_frac) = NaN;

                NREM_FR_1 = NREM_wake_per(:,1);
                NREM_dFR_per = [];
                for nrem_i = 2:size(NREM_wake_per,2)
                    NREM_dFR_per = [NREM_dFR_per, NREM_wake_per(:,nrem_i)./NREM_wake_per(:,1)];
                end
                
                NREM_wake_perT = NREM_wake_perT(:,2:end);
                NREM_dFR_nonan = [NREM_dFR_nonan; NREM_dFR_per(:)];
                NREM_offT_nonan = [NREM_offT_nonan; NREM_wake_perT(:)];

                if length(NREM_offT_nonan) ~= length(NREM_dFR_nonan)
                    keyboard
                end

                if isnan(REM_wake_per)
                    continue
                end

                REM_wake_per(REM_wake_per<min_FR_dur_frac) = NaN;
                REM_dFR_per = [];
                for rem_i = 1:size(REM_wake_per,2)
                    REM_dFR_per = [REM_dFR_per, REM_wake_per(:,rem_i)./NREM_wake_per(:,1)];
                end

                REM_wake_perT = REM_wake_perT(:,1:end);
                REM_dFR_nonan = [REM_dFR_nonan; REM_dFR_per(:)];
                REM_offT_nonan = [REM_offT_nonan; REM_wake_perT(:)];
            end

        end

        NREM_nans = isnan(NREM_dFR_nonan);
        NREM_outlier = NREM_dFR_nonan > max_FR_dur_frac_Delta;
        NREM_toRem = (NREM_nans + NREM_outlier) > 0;
        NREM_dFR_nonan(NREM_toRem) = [];
        NREM_offT_nonan(NREM_toRem) = [];

        REM_nans = isnan(REM_dFR_nonan);
        REM_outlier = REM_dFR_nonan > max_FR_dur_frac_Delta;
        REM_toRem = (REM_nans + REM_outlier) > 0;
        REM_dFR_nonan(REM_toRem) = [];
        REM_offT_nonan(REM_toRem) = [];
        
        %%
        %% Fig - plotting the first-last change
        if mean_t == 5

            all_data = [REM_dFR_nonan REM_offT_nonan];
            all_data_sort = sortrows(all_data,2);
            
            ngroups = 10;
            group_split = round(linspace(0,numel(REM_offT_nonan),ngroups+1));
            for uu = 1:ngroups
                this_group = all_data_sort(group_split(uu)+1 : group_split(uu+1), 1);
                group_means(uu) = nanmean(this_group);
                group_sem(uu) = std(this_group,0,'omitnan') / sqrt(numel(this_group)-1);
                group_means_offT(uu) = nanmean(all_data_sort(group_split(uu)+1 : group_split(uu+1), 2));
            end
            
            [rem_rho,rem_p_rho] = corr(REM_dFR_nonan, REM_offT_nonan, 'Type', corr_type);
            rem_asterisks = get_asterisks_from_pval(rem_p_rho);
            rem_lincoeff = polyfit(REM_offT_nonan, REM_dFR_nonan, 1);
    
            %% plotting
            markersize = 4;
            mylims = 1;
            
            setFigureDefaults;
            figure();
            set(gcf,'position',[.2 .1 .3 .8]);
            subplot(2,1,1);
            scatter(REM_offT_nonan,REM_dFR_nonan,markersize^2,c_rem,'s','filled');

            hold on;
            if mylims
                xlims = [-500 11000];
                ylims = [0 max_FR_dur_frac_Delta];
                xl2 = [-250 7000];
                yl2 = [0.75 1.75];
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            X = xlims(1):10:xlims(end);
            Y = rem_lincoeff(2) + rem_lincoeff(1).*X;
            plot(X,Y,'--k','linewidth',1.5);
            set(gca,'xlim',xlims,'ylim',ylims);
            ylabel({['Firing rate frac. change'],['(last / NREM first epoch)']},'fontsize',12);
            title('Ext. Sleep change in FR during REM - scatter','fontsize',18);
            
            subplot(2,1,2);
            mfc = c_rem;

            errorbar(group_means_offT,group_means,group_sem,'s','capsize',12,'markersize',8,...
                'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_rem);
            hold on;
            box off
            plot(X,Y,'--k','linewidth',1.5);
            if mylims
                set(gca,'xlim',xl2,'ylim',yl2);
                text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',rem_rho,rem_p_rho),'fontsize',16);
            end
            ylabel({['Firing rate frac. change'],['(last / NREM first epoch)']},'fontsize',12);
            xlabel('Time from start of extended sleep (s)','fontsize',20);
            


            %% NREM
            NREM_all_data = [NREM_dFR_nonan NREM_offT_nonan];
            NREM_all_data_sort = sortrows(NREM_all_data,2);
            
            % ngroups = 5;
            NREM_group_split = round(linspace(0,numel(NREM_offT_nonan),ngroups+1));
            for uu = 1:ngroups
                NREM_this_group = NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 1);
                NREM_group_means(uu) = nanmean(NREM_this_group);
                NREM_group_sem(uu) = std(NREM_this_group,0,'omitnan') / sqrt(numel(NREM_this_group)-1);
                NREM_group_means_offT(uu) = nanmean(NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 2));
            end

            [nrem_rho,nrem_p_rho] = corr(NREM_offT_nonan, NREM_dFR_nonan, 'Type', corr_type);
            nrem_asterisks = get_asterisks_from_pval(nrem_p_rho);
            nrem_lincoeff = polyfit(NREM_offT_nonan, NREM_dFR_nonan, 1);
            
            %% plotting
            markersize = 4;
            mylims = 1;
            
            setFigureDefaults;
            figure();
            set(gcf,'position',[.2 .1 .3 .8]);
            subplot(2,1,1);
            scatter(NREM_offT_nonan,NREM_dFR_nonan,markersize^2,c_nrem,'s','filled');

            hold on;
            if mylims
                xlims = [-500 11000];
                ylims = [0 max_FR_dur_frac_Delta];
                xl2 = [-250 7000];
                yl2 = [0.75 1.75];
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            X = xlims(1):10:xlims(end);
            Y = nrem_lincoeff(2) + nrem_lincoeff(1).*X;
            plot(X,Y,'--k','linewidth',1.5);
            set(gca,'xlim',xlims,'ylim',ylims);
            ylabel({['Firing rate frac. change'],['(last / NREM first epoch)']},'fontsize',12);
            title('Ext. Sleep change in FR during NREM - scatter','fontsize',18);
        
            mfc = c_nrem;

            subplot(2,1,2);
            errorbar(NREM_group_means_offT,NREM_group_means,NREM_group_sem,'s','capsize',12,'markersize',8,...
                'linestyle','none','markerfacecolor',mfc,'color',c_nrem,'linewidth',1.5);
            hold on;
            box off;
            plot(X,Y,'--k','linewidth',1.5);
            if mylims
                set(gca,'xlim',xl2,'ylim',yl2);
                text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',nrem_rho,nrem_p_rho),'fontsize',16);
            end
            ylabel({['Firing rate frac. change'],['(last / NREM first epoch)']},'fontsize',12);
            xlabel('Time from start of extended sleep (s)','fontsize',20);


            % BAR GRAPHS
            mylims = 1;
            [~,p_rem] = ttest(REM_delta_nonan-1);
            [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            [~,p_nrem] = ttest(NREM_delta_nonan-1);
            [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            
            dfig = figure();
            set(dfig,'position',[.1 .2 .25 .4]);
            box off
            hold on;
            bw = .3;
            csz = 20;
            mfc1 = c_rem;
            mfc2 = c_nrem;
            ec1 = 'none';
            ec2 = 'none';
    
            rem_bar = bar(1,REM_mean,bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            rem_err = errorbar(1,REM_mean,REM_sem,'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(2,NREM_mean,bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(2,NREM_mean,NREM_sem,'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
            if mylims
                xl = [.5 2.5];
                yl = [0.8 1.3];
                yt = 0.8:.1:1.3;
            else
                xl = get(gca,'xlim');
                yl = get(gca,'ylim');
                yt = get(gca,'ytick');
            end
            text(.75,1.25,sprintf('p = %.4f',p_rem),'fontsize',16);
            text(1.75,1.25,sprintf('p = %.4f',p_nrem),'fontsize',16);
            set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'REM','NREM'},...
                'ytick',yt);
            ylabel({['Firing rate frac. change'],['(last / first epoch)']},'fontsize',16);
            title('Ext. Sleep delta FR by state','fontsize',18);
        
            ref_l = refline(0,1);
            ref_l.LineStyle = '--';
            ref_l.LineWidth = 1.5;
            ref_l.Color = 'k';

        else
    
            %% if mean_t == 3, plotting is different
        
            %% Fig - plotting the first-last change
            mylims = 1;
            
            % STATS - t-test versus no change (mean = 0)
            [~,p_nr] = ttest(NREM_delta_nonan-1);
            [a_nr,fsz_nr] = get_asterisks_from_pval(p_nr);
            [~,p_rem] = ttest(REM_delta_nonan-1);
            [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            
            dfig = figure();
            set(dfig,'position',[.1 .2 .25 .4]);
            box off
            hold on;
            bw = .3;
            csz = 22;
        %     if dep
            mfc1 = c_nrem;
            mfc2 = c_rem;
            ec1 = 'none';
            ec2 = 'none';
        %     else
        %         mfc1 = 'none';
        %         mfc2 = 'none';
        %         ec1 = c_nrem;
        %         ec2 = c_rem;
        %     end
            
            % plot the bars
            nr_bar = bar(1,NREM_mean,bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            nr_err = errorbar(1,NREM_mean,NREM_sem,'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
            rem_bar = bar(2,REM_mean,bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            rem_err = errorbar(2,REM_mean,REM_sem,'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            if mylims
                xl = [.5 2.5];
                yl = [0.8 1.3];
                yt = 0.8:.1:1.3;
            else
                xl = get(gca,'xlim');
                yl = get(gca,'ylim');
                yt = get(gca,'ytick');
            end
            text(.75,0.1,sprintf('p = %.4f',p_nr),'fontsize',16);
            text(1.75,0.1,sprintf('p = %.4f',p_rem),'fontsize',16);
            set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'NREM','REM'},...
                'ytick',yt);
            ylabel('Firing rate (z)','fontsize',22);
            title('Ext. Sleep delta FR by state','fontsize',18);
        
            ref_l = refline(0,1);
            ref_l.LineStyle = '--';
            ref_l.LineWidth = 1.5;
            ref_l.Color = 'k';
        
        
        
            markersize = 5;
            
            all_data_d = [NREM_delta_nonan sleepdur_nonan];
            all_data_sort_d = sortrows(all_data_d,2);
            
            ngroups = 10;
            group_split_d = round(linspace(0,numel(NREM_delta_nonan),ngroups+1));
            for uu = 1:ngroups
                this_group = all_data_sort_d(group_split_d(uu)+1 : group_split_d(uu+1), 1);
                group_means_d(uu) = nanmean(this_group);
                group_sem_d(uu) = std(this_group,0,'omitnan') / sqrt(numel(this_group)-1);
                group_means_offT_d(uu) = nanmean(all_data_sort_d(group_split_d(uu)+1 : group_split_d(uu+1), 2));
                group_max_d(uu) = max(all_data_sort_d(group_split_d(uu)+1 : group_split_d(uu+1), 2));
            end
        
            
            [rho_d,p_rho_d] = corr(sleepdur_nonan, NREM_delta_nonan, 'Type', corr_type);
        %     asterisks_d = get_asterisks_from_pval(p_rho_d);
            lincoeff_d = polyfit(sleepdur_nonan, NREM_delta_nonan, 1);
            
            
            mylims = 1;
            
            setFigureDefaults;
            figure();
            set(gcf,'position',[.1 .1 .6 .7]);
            subplot(2,1,1);
        %     if dep
            scatter(sleepdur_nonan,NREM_delta_nonan,markersize^2,'k','filled');
        %     else
        %         scatter(sleepdur_nonan,NREM_delta_nonan,markersize^2,'k');
        %     end
            hold on;
            if mylims
                xlims = [-500 7000];
                ylims = [0 4];
                xl2 = [-500 7000];
                yl2 = [0 2.5];
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            X = xlims(1):10:xlims(end);
            Y = lincoeff_d(2) + lincoeff_d(1).*X;
            plot(X,Y,'--k','linewidth',1.5);
            text(xlims(2)*.8,ylims(2)*.9,sprintf('r = %.4f\np = %.4f',rho_d,p_rho_d),'fontsize',16);
            set(gca,'xlim',xlims,'ylim',ylims);
            ylabel('Fractional change in firing rate','fontsize',21);
            
            subplot(2,1,2);
        %     if dep
            mfc = 'k';
            mfc2 = [.7 .7 .7];
        %     else
        %         mfc = 'none';
        %         mfc2 = 'none';
        %     end
            
            hold on;
            errorbar(sleepdur_bycell_nonan,NREM_all_deltaFR,NREM_all_deltaSEM,'o',...
                'color',[.7 .7 .7],'markerfacecolor',mfc2,'linestyle','none',...
                'linewidth',1.5,'markersize',5);
            errorbar(group_means_offT_d,group_means_d,group_sem_d,'o','capsize',7,'markersize',7,...
                'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color','k');
             X = xlims(1):10:xlims(end);
            Y = lincoeff_d(2) + lincoeff_d(1).*X;
            plot(X,Y,'--k','linewidth',1.5);
            plot(xlims,[1 1],'m:','linewidth',2);
            set(gca,'ylim',yl2,'xlim',xl2);
            
            
            ylabel('Fractional change in firing rate','fontsize',21);
            xlabel('Duration of extended sleep (s)','fontsize',20);
            
            sleep_starts_CIRC = mod(sleep_starts_nonan_NREM ./ 3600, 24);
            
             [rho_c,p_rho_c] = corr(sleep_starts_CIRC, NREM_delta_nonan, 'Type', corr_type);
        %     asterisks_d = get_asterisks_from_pval(p_rho_d);
            lincoeff_c = polyfit(sleep_starts_CIRC, NREM_delta_nonan, 1);
            
            
            mylims = 1;
            
            setFigureDefaults;
            figure();
            set(gcf,'position',[.1 .1 .6 .7]);
            subplot(2,1,1);
            if dep
                scatter(sleep_starts_CIRC,NREM_delta_nonan,markersize^2,'k','filled');
            else
                scatter(sleep_starts_CIRC,NREM_delta_nonan,markersize^2,'k');
            end
            hold on;
            if mylims
                xlims = [-1 25];
                ylims = [0 4];
                xl2 = [-500 7000];
                yl2 = [0 2.5];
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            X = xlims(1):1:xlims(end);
            Y = lincoeff_c(2) + lincoeff_c(1).*X;
            plot(X,Y,'--k','linewidth',1.5);
        %     line([-1 25],[1 1],'color','y','linewidth',2,'linestyle','--');
            text(xlims(2)*.8,ylims(2)*.9,sprintf('r = %.4f\np = %.4f',rho_c,p_rho_c),'fontsize',16);
            set(gca,'xlim',xlims,'ylim',ylims,'xtick',0:4:24);
            ylabel('Fractional change in FR','fontsize',21);
            xlabel('ZT time','fontsize',20);
        end        
    
    
        %%% CIRCADIAN ANALYSIS %%%
    
        sleep_starts_CIRC_REM = mod(sleep_starts_nonan_REM./3600, 24);
        sleep_starts_CIRC_NREM = mod(sleep_starts_nonan_NREM./3600, 24);
        
        sleep_ends_CIRC_REM = sleep_starts_CIRC_REM + sleepdur_nonan_REM/3600;
        sleep_ends_CIRC_NREM = sleep_starts_CIRC_NREM + sleepdur_nonan_NREM/3600;
        
        %% calculate light vs dark circ data bins
        CIRC_REM_this_group = {};
        CIRC_NREM_this_group = {};
        CIRC_REM_group_means = [];
        CIRC_REM_group_sem = [];
        CIRC_NREM_group_means = [];
        CIRC_NREM_group_sem = [];
        CIRC_group_means_offT = [];
        
        CIRC_group_split = 0 : 12 : 24;
        ngroups = numel(CIRC_group_split)-1;
        for uu = 1:ngroups
            
            g0 = CIRC_group_split(uu);
            g1 = CIRC_group_split(uu+1);
            CIRC_REM_this_group_idx = find(sleep_starts_CIRC_REM >= g0 & sleep_ends_CIRC_REM < g1);
            CIRC_NREM_this_group_idx = find(sleep_starts_CIRC_NREM >= g0 & sleep_ends_CIRC_NREM < g1);
            CIRC_REM_this_group{uu} = REM_delta_nonan(CIRC_REM_this_group_idx);
            CIRC_NREM_this_group{uu}= NREM_delta_nonan(CIRC_NREM_this_group_idx);
            CIRC_REM_group_means(uu) = nanmean(CIRC_REM_this_group{uu});
            CIRC_REM_group_sem(uu) = std(CIRC_REM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_REM_this_group{uu})-1);
            CIRC_NREM_group_means(uu) = nanmean(CIRC_NREM_this_group{uu});
            CIRC_NREM_group_sem(uu) = std(CIRC_NREM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_NREM_this_group{uu})-1);
            CIRC_group_means_offT(uu) = mean([g0,g1]);
        end
    
        %% Fig - plotting the first-last change - Light vs dark
        mylims = 1;
        
        for per_num = 1:length(CIRC_group_split)-1
            %light group == 1
    %         per_num = 1;
        
            [~,p_rem] = ttest(CIRC_REM_this_group{per_num}-1);
            [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            [~,p_nrem] = ttest(CIRC_NREM_this_group{per_num}-1);
            [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            
            dfig = figure();
            set(dfig,'position',[.1 .2 .25 .4]);
            box off
            hold on;
            bw = .3;
            csz = 20;
            mfc1 = c_rem;
            mfc2 = c_nrem;
            ec1 = 'none';
            ec2 = 'none';
        
            REM_bar = bar(1,CIRC_REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            REM_err = errorbar(1,CIRC_REM_group_means(per_num),CIRC_REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(2,CIRC_NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(2,CIRC_NREM_group_means(per_num),CIRC_NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
            if mylims
                xl = [.5 2.5];
                yl = [0.8 1.4];
                yt = 0.8:.1:1.4;
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            text(.75,0.18,sprintf('p = %.4f',p_rem),'fontsize',16);
            text(1.75,0.18,sprintf('p = %.4f',p_nrem),'fontsize',16);
            set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'REM','NREM'},...
                'ytick',yt);
            ylabel({['Firing rate frac. change'],['(last / first epoch)']},'fontsize',16);
            ref_l = refline(0,1);
            ref_l.LineStyle = '--';
            ref_l.LineWidth = 1.5;
            ref_l.Color = 'k';        
            if per_num == 1
                title({['Ext. Sleep delta FR by state'],...
                    ['- Light Period']},'fontsize',16);
            else
                title({['Ext. Sleep delta FR by state'],...
                    ['- Dark Period']},'fontsize',16);
            end
        end
    


        %% delta changes vs. binned time post hunt
    
        sleep_starts_REM = sleep_starts_nonan_REM./3600;
        sleep_starts_NREM = sleep_starts_nonan_NREM./3600;
        
        sleep_ends_REM = sleep_starts_REM + sleepdur_nonan_REM/3600;
        sleep_ends_NREM = sleep_starts_NREM + sleepdur_nonan_NREM/3600;
    
        %% calculate light vs dark circ data bins
        REM_this_group = {};
        NREM_this_group = {};
        REM_group_means = [];
        REM_group_sem = [];
        NREM_group_means = [];
        NREM_group_sem = [];
        group_means_offT = [];
        
        group_hrs = 24;
        group_split = post_hunt_hr : group_hrs : 6.5*24;
        ngroups = numel(group_split)-1;
        for uu = 1:ngroups
            
            g0 = group_split(uu);
            g1 = group_split(uu+1);
            REM_this_group_idx = find(sleep_starts_REM >= g0 & sleep_ends_REM < g1);
            NREM_this_group_idx = find(sleep_starts_NREM >= g0 & sleep_ends_NREM < g1);
            REM_this_group{uu} = REM_delta_nonan(REM_this_group_idx);
            NREM_this_group{uu}= NREM_delta_nonan(NREM_this_group_idx);
            REM_group_means(uu) = nanmean(REM_this_group{uu});
            REM_group_sem(uu) = std(REM_this_group{uu},0,'omitnan') / sqrt(numel(REM_this_group{uu})-1);
            NREM_group_means(uu) = nanmean(NREM_this_group{uu});
            NREM_group_sem(uu) = std(NREM_this_group{uu},0,'omitnan') / sqrt(numel(NREM_this_group{uu})-1);
            group_means_offT(uu) = mean([g0,g1]);
        end
    
        dfig = figure('Position',[0.0635 0.1833 0.3875 0.3741]);
        set(dfig,'position',[0.0120 0.3019 0.3885 0.3667]);
        box off
        hold on;
        bw = .3;
        csz = 20;
        mfc1 = c_rem;
        mfc2 = c_nrem;
        ec1 = 'none';
        ec2 = 'none';    
        mylims = 0;
        for per_num = 1:length(group_split)-1
            %light group == 1
    %         per_num = 1;
            
            if ~isempty(REM_this_group{per_num})
                [~,p_rem] = ttest(REM_this_group{per_num}-1);
%                 [a_aw,fsz_aw] = get_asterisks_from_pval(p_aw);
            else
                p_rem = 'nan';
            end
            if ~isempty(NREM_this_group{per_num})
                [~,p_nrem] = ttest(NREM_this_group{per_num}-1);
%                 [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            else
                p_nrem = 'nan';
            end
            
            bar_x1 = (per_num-1)*2 + 1;
            bar_x2 = (per_num-1)*2 + 2;
    
            REM_bar = bar(bar_x1,REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            REM_err = errorbar(bar_x1,REM_group_means(per_num),REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(bar_x2,NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(bar_x2,NREM_group_means(per_num),NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
    
            text(bar_x1,1.35,sprintf('p = %.4f',p_rem),'fontsize',10,'Rotation',45);
            text(bar_x2,1.35,sprintf('p = %.4f',p_nrem),'fontsize',10,'Rotation',45);
            ylabel({['Firing rate frac. change'],['(last / first epoch)']},'fontsize',16);
    
    %         if per_num == 1
    %             title({['Ext. sleep delta FR by state'],...
    %                 ['- Light Period']},'fontsize',16);
    %         else
    %             title({['Ext. sleep delta FR by state'],...
    %                 ['- Dark Period']},'fontsize',16);
    %         end
        end
    
        post_hunt_hrs = group_split+group_hrs/2 - post_hunt_hr;
        set(gca,'xtick',1.5:2:length(group_split)*2,'xticklabel',post_hunt_hrs)
        ylim([0.75 1.5])
        xlabel('Hours post hunt')

        ref_l = refline(0,1);
        ref_l.LineStyle = '--';
        ref_l.LineWidth = 1.5;
        ref_l.Color = 'k';     
        title('FR change by state post hunt')

        if save_delta_data
            %         delta_data
            SLEEP_DELTAS.group_value                    = group_means_d;
            SLEEP_DELTAS.group_times                    = group_means_offT_d;
            SLEEP_DELTAS.params.G_bin                   = G_bin;
            SLEEP_DELTAS.params.dur_frac                = dur_frac;
            SLEEP_DELTAS.params.duration_threshold      = duration_threshold;
            SLEEP_DELTAS.params.mean_t                  = mean_t;
            SLEEP_DELTAS.params.ext_sleep_time_thresh   = ext_sleep_time_thresh;
            
            
    %         sf = 'SLEEP_DELTAS_v0.mat';
    %         sd = 'Z:\ATP_MAIN\CODE\lfp_analysis_beta\Analysis_Data';
    %         save([sd filesep sf],'SLEEP_DELTAS','-v7.3');
        end

        %%
    case {6}

        
        %% calculate first last changes
        % for percent changes against duration time corr plots
        % loop through and normalize changes to first NREM/REM
        REM_offT_nonan = [];
        REM_dFR_nonan = [];
        NREM_offT_nonan = [];
        NREM_dFR_nonan = [];

        REM_BL_FR_nonan = [];
        NREM_BL_FR_nonan = [];
        for anim_i = 1:size(all_NREM_zFR,1)
            for tt = 1:size(all_NREM_zFR,2)
                NREM_sleep_per = all_NREM_zFR{anim_i,tt};
                REM_sleep_per = all_REM_zFR{anim_i,tt};
                NREM_sleep_perT = all_NREM_offT{anim_i,tt};
                REM_sleep_perT = all_REM_offT{anim_i,tt};  
%                 
%                 NREM_sleep_BL_FR = all_BL_cell_FR_NREM{anim_i,tt};
%                 REM_sleep_BL_FR = all_BL_cell_FR_REM{anim_i,tt}; 

                if isnan(NREM_sleep_per)
                    continue
                end
                
                if size(NREM_sleep_per,2) < 2
                    continue
                end

                NREM_sleep_per(NREM_sleep_per<min_FR_dur_frac) = NaN;

                NREM_FR_1 = NREM_sleep_per(:,1);
                NREM_dFR_per = [];
                for nrem_i = 2:size(NREM_sleep_per,2)
                    nrem_i_delta = 100*(NREM_sleep_per(:,nrem_i) - NREM_sleep_per(:,1))./(NREM_sleep_per(:,1));
                    NREM_dFR_per = [NREM_dFR_per; nrem_i_delta];
                end
                
                NREM_sleep_perT = NREM_sleep_perT(:,2:end);
                NREM_dFR_nonan = [NREM_dFR_nonan; NREM_dFR_per(:)];
                NREM_offT_nonan = [NREM_offT_nonan; NREM_sleep_perT(:)];
% 
%                 NREM_FR_toadd = NREM_sleep_BL_FR(:,2:end);
%                 NREM_BL_FR_nonan = [NREM_BL_FR_nonan; NREM_FR_toadd(:)];

                
                if length(NREM_offT_nonan) ~= length(NREM_dFR_nonan)
                    disp('offT and dFR not same length')
                    keyboard
                end

                if isnan(REM_sleep_per)
                    continue
                end

                REM_sleep_per(REM_sleep_per<min_FR_dur_frac) = NaN;
                REM_dFR_per = [];
                for rem_i = 1:size(REM_sleep_per,2)
                    rem_i_delta = 100*(REM_sleep_per(:,rem_i) - NREM_sleep_per(:,1))./(NREM_sleep_per(:,1));
                    REM_dFR_per = [REM_dFR_per; rem_i_delta];
                end

                REM_sleep_perT = REM_sleep_perT(:,1:end);
                REM_dFR_nonan = [REM_dFR_nonan; REM_dFR_per(:)];
                REM_offT_nonan = [REM_offT_nonan; REM_sleep_perT(:)];
% 
%                 REM_FR_toadd = REM_sleep_BL_FR(:,1:end);
%                 REM_BL_FR_nonan = [REM_BL_FR_nonan; REM_FR_toadd(:)];
            end

        end

        NREM_nans = isnan(NREM_dFR_nonan);
%         NREM_outlier = NREM_dFR_nonan > max_FR_dur_frac_Delta;
        NREM_outlier = zeros(size(NREM_nans));
        NREM_toRem = (NREM_nans + NREM_outlier) > 0;
        num_outs = sum(NREM_toRem);
        disp(['Number of NREM dFR outliers removed: ',num2str(num_outs)])   

        NREM_dFR_nonan(NREM_toRem) = [];
        NREM_offT_nonan(NREM_toRem) = [];
%         NREM_BL_FR_nonan(NREM_toRem) = [];

        REM_nans = isnan(REM_dFR_nonan);
%         REM_outlier = REM_dFR_nonan > max_FR_dur_frac_Delta;
        REM_outlier = zeros(size(REM_nans));
        REM_toRem = (REM_nans + REM_outlier) > 0;
        num_outs = sum(REM_toRem);
        disp(['Number of REM dFR outliers removed: ',num2str(num_outs)])

        REM_dFR_nonan(REM_toRem) = [];
        REM_offT_nonan(REM_toRem) = [];
%         REM_BL_FR_nonan(REM_toRem) = [];
        
        %% Fig - plotting the first-last change

        all_data = [REM_dFR_nonan REM_offT_nonan];
        all_data_sort = sortrows(all_data,2);
        
        ngroups = 10;
        group_split = round(linspace(0,numel(REM_offT_nonan),ngroups+1));
        for uu = 1:ngroups
            this_group = all_data_sort(group_split(uu)+1 : group_split(uu+1), 1);
            group_means(uu) = nanmean(this_group);
            group_sem(uu) = std(this_group,0,'omitnan') / sqrt(numel(this_group)-1);
            group_means_offT(uu) = nanmean(all_data_sort(group_split(uu)+1 : group_split(uu+1), 2));
        end
        
        [rem_rho,rem_p_rho] = corr(REM_dFR_nonan, REM_offT_nonan, 'Type', corr_type);
        rem_asterisks = get_asterisks_from_pval(rem_p_rho);
        rem_lincoeff = polyfit(REM_offT_nonan, REM_dFR_nonan, 1);

        %% plotting
        markersize = 4;
        mylims = 1;
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .3 .8]);
        subplot(2,1,1);
    %     if dep
        scatter(REM_offT_nonan,REM_dFR_nonan,markersize^2,c_rem,'s','filled');
    %     else
    %         scatter(REM_offT_nonan,REM_zFR_nonan,markersize^2,c_rem,'s');
    %     end
        hold on;
        if mylims
            xlims = [-500 11000];
            ylims = [-200 600];
            xl2 = [-250 7000];
            if strcmp(loadFieldname,'ContCell')
                yl2 = [-20 80];
            else
                yl2 = [-20 80];
            end
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):10:xlims(end);
        Y = rem_lincoeff(2) + rem_lincoeff(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        set(gca,'xlim',xlims,'ylim',ylims);
        ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
        title('Ext. Sleep change in FR during REM - scatter','fontsize',18);
        
        subplot(2,1,2);
        mfc = c_rem;
        errorbar(group_means_offT,group_means,group_sem,'s','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_rem);
        hold on;
        box off
        plot(X,Y,'--k','linewidth',1.5);
        if mylims
            set(gca,'xlim',xl2,'ylim',yl2);
            text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',rem_rho,rem_p_rho),'fontsize',16);
        end
        ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
        xlabel('Time from start of extended sleep (s)','fontsize',20);
        


        %% NREM
        NREM_all_data = [NREM_dFR_nonan NREM_offT_nonan];
        NREM_all_data_sort = sortrows(NREM_all_data,2);
        
        % ngroups = 5;
        NREM_group_split = round(linspace(0,numel(NREM_offT_nonan),ngroups+1));
        for uu = 1:ngroups
            NREM_this_group = NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 1);
            NREM_group_means(uu) = nanmean(NREM_this_group);
            NREM_group_sem(uu) = std(NREM_this_group,0,'omitnan') / sqrt(numel(NREM_this_group)-1);
            NREM_group_means_offT(uu) = nanmean(NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 2));
        end

        [nrem_rho,nrem_p_rho] = corr(NREM_offT_nonan, NREM_dFR_nonan, 'Type', corr_type);
        nrem_asterisks = get_asterisks_from_pval(nrem_p_rho);
        nrem_lincoeff = polyfit(NREM_offT_nonan, NREM_dFR_nonan, 1);
        
        disp('correlation:')
        disp(['r-values  --  NREM=',num2str(nrem_rho),'  REM=',num2str(rem_rho)])
        disp(['p-values  --  NREM=',num2str(nrem_p_rho),'  REM=',num2str(rem_p_rho)])

        %% plotting
        markersize = 4;
        mylims = 1;
        
        setFigureDefaults;
        figure();
        set(gcf,'position',[.2 .1 .3 .8]);
        subplot(2,1,1);
        scatter(NREM_offT_nonan,NREM_dFR_nonan,markersize^2,c_nrem,'s','filled');

        hold on;
        if mylims
            xlims = [-500 11000];
            ylims = [-200 600];
            xl2 = [-250 7000];
%             yl2 = [-0 100];
            if strcmp(loadFieldname,'ContCell')
                yl2 = [-20 80];
            else
                yl2 = [-20 80];
            end
        else
            xlims = get(gca,'xlim');
            ylims = get(gca,'ylim');
            xl2 = get(gca,'xlim');
            yl2 = get(gca,'ylim');
        end
        X = xlims(1):10:xlims(end);
        Y = nrem_lincoeff(2) + nrem_lincoeff(1).*X;
        plot(X,Y,'--k','linewidth',1.5);
        set(gca,'xlim',xlims,'ylim',ylims);
        ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
        title('Ext. Sleep change in FR during NREM - scatter','fontsize',18);
    
    %     if dep
            mfc = c_nrem;
    %     else
    %         mfc = 'none';
    %     end
        subplot(2,1,2);
        errorbar(NREM_group_means_offT,NREM_group_means,NREM_group_sem,'s','capsize',12,'markersize',8,...
            'linestyle','none','markerfacecolor',mfc,'color',c_nrem,'linewidth',1.5);
        hold on;
        box off;
        plot(X,Y,'--k','linewidth',1.5);
        if mylims
            set(gca,'xlim',xl2,'ylim',yl2);
            text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',nrem_rho,nrem_p_rho),'fontsize',16);
        end
        ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
        xlabel('Time from start of extended sleep (s)','fontsize',20);


%         %% change by BL FR
%         %% REM
% 
%         all_data = [REM_dFR_nonan REM_BL_FR_nonan];
%         all_data_sort = sortrows(all_data,2);
%         
%         ngroups = 10;
%         group_split = round(linspace(0,numel(REM_BL_FR_nonan),ngroups+1));
%         for uu = 1:ngroups
%             this_group = all_data_sort(group_split(uu)+1 : group_split(uu+1), 1);
%             group_means(uu) = nanmean(this_group);
%             group_sem(uu) = std(this_group,0,'omitnan') / sqrt(numel(this_group)-1);
%             group_means_offT(uu) = nanmean(all_data_sort(group_split(uu)+1 : group_split(uu+1), 2));
%         end
%         
%         [rem_rho,rem_p_rho] = corr(REM_dFR_nonan, REM_BL_FR_nonan);
%         rem_asterisks = get_asterisks_from_pval(rem_p_rho);
%         rem_lincoeff = polyfit(REM_BL_FR_nonan, REM_dFR_nonan, 1);
% 
%         %% plotting
%         markersize = 4;
%         mylims = 1;
%         
%         setFigureDefaults;
%         figure();
%         set(gcf,'position',[.2 .1 .3 .8]);
%         subplot(2,1,1);
%         scatter(REM_BL_FR_nonan,REM_dFR_nonan,markersize^2,c_rem,'s','filled');
% 
%         hold on;
%         if mylims
%             xlims = [-0 10];
%             xl2 = [-0 8];
%             ylims = [-200 1000];
%             yl2 = [-0 80];           
%         else
%             xlims = get(gca,'xlim');
%             ylims = get(gca,'ylim');
%             xl2 = get(gca,'xlim');
%             yl2 = get(gca,'ylim');
%         end
%         X = xlims(1):10:xlims(end);
%         Y = rem_lincoeff(2) + rem_lincoeff(1).*X;
%         plot(X+(min(REM_BL_FR_nonan)),Y,'--k','linewidth',1.5);
% %             set(gca,'XScale','log')
%         set(gca,'xlim',xlims,'ylim',ylims);
%         ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
%         title('Ext. Sleep change in FR during REM - scatter','fontsize',18);
%         
%         subplot(2,1,2);
%         mfc = c_rem;
%         errorbar(group_means_offT,group_means,group_sem,'s','capsize',12,'markersize',8,...
%             'linestyle','none','markerfacecolor',mfc,'linewidth',1.5,'color',c_rem);
%         hold on;
%         box off
% %             set(gca,'XScale','log')
% 
%         plot(X+(min(group_means_offT)),Y,'--k','linewidth',1.5);
%         if mylims
%             set(gca,'xlim',xl2,'ylim',yl2);
%             text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',rem_rho,rem_p_rho),'fontsize',16);
%         end
%         ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
%         xlabel('Baseline cell FR (Hz)','fontsize',20);            
% 
% 
%         %% NREM
%         NREM_all_data = [NREM_dFR_nonan NREM_BL_FR_nonan];
%         NREM_all_data_sort = sortrows(NREM_all_data,2);
%         
%         % ngroups = 5;
%         NREM_group_split = round(linspace(0,numel(NREM_BL_FR_nonan),ngroups+1));
%         for uu = 1:ngroups
%             NREM_this_group = NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 1);
%             NREM_group_means(uu) = nanmean(NREM_this_group);
%             NREM_group_sem(uu) = std(NREM_this_group,0,'omitnan') / sqrt(numel(NREM_this_group)-1);
%             NREM_group_means_offT(uu) = nanmean(NREM_all_data_sort(NREM_group_split(uu)+1 : NREM_group_split(uu+1), 2));
%         end
% 
%         [nrem_rho,nrem_p_rho] = corr(NREM_BL_FR_nonan, NREM_dFR_nonan);
%         nrem_asterisks = get_asterisks_from_pval(nrem_p_rho);
%         nrem_lincoeff = polyfit(NREM_BL_FR_nonan, NREM_dFR_nonan, 1);
%         
%         %% plotting
%         markersize = 4;
%         mylims = 1;
%         
%         setFigureDefaults;
%         figure();
%         set(gcf,'position',[.2 .1 .3 .8]);
%         subplot(2,1,1);
%         scatter(NREM_BL_FR_nonan,NREM_dFR_nonan,markersize^2,c_nrem,'s','filled');
% 
%         hold on;
%         if mylims
%             xlims = [-0 10];
%             xl2 = [-0 8];
%             ylims = [-200 1000];
%             yl2 = [-0 80];
%             
%         else
%             xlims = get(gca,'xlim');
%             ylims = get(gca,'ylim');
%             xl2 = get(gca,'xlim');
%             yl2 = get(gca,'ylim');
%         end
%         X = xlims(1):10:xlims(end);
%         Y = nrem_lincoeff(2) + nrem_lincoeff(1).*X;
%         plot(X+(min(NREM_BL_FR_nonan)),Y,'--k','linewidth',1.5);
%         set(gca,'xlim',xlims,'ylim',ylims);
% %             set(gca,'XScale','log')
%         ylabel({'Firing rate change (% change from first NREM epoch)'},'fontsize',16);
%         title('Ext. Sleep change in FR during NREM - scatter','fontsize',18);
%     
%         mfc = c_nrem;
%         subplot(2,1,2);
%         errorbar(NREM_group_means_offT,NREM_group_means,NREM_group_sem,'s','capsize',12,'markersize',8,...
%             'linestyle','none','markerfacecolor',mfc,'color',c_nrem,'linewidth',1.5);
% %             set(gca,'XScale','log')
%         hold on;
%         box off;
%         plot(X+(min(NREM_group_means_offT)),Y,'--k','linewidth',1.5);
%         if mylims
%             set(gca,'xlim',xl2,'ylim',yl2);
%             text(xl2(2)*.8,yl2(2)*.9,sprintf('r = %.4f\np = %.4f',nrem_rho,nrem_p_rho),'fontsize',16);
%         end
%         ylabel({'Firing rate change (% change from first NREM epoch)'},'fontsize',16);
%         xlabel('Baseline cell FR (Hz)','fontsize',20);            



        %% BAR GRAPHS
        mylims = 1;
        [~,p_rem] = ttest(REM_delta_nonan);
        [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
        [~,p_nrem] = ttest(NREM_delta_nonan);
        [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
        
        dfig = figure();
        set(dfig,'position',[.1 .2 .25 .4]);
        box off
        hold on;
        bw = .3;
        csz = 20;
        mfc1 = c_rem;
        mfc2 = c_nrem;
        ec1 = 'none';
        ec2 = 'none';

        rem_bar = bar(1,REM_mean,bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
        rem_err = errorbar(1,REM_mean,REM_sem,'linestyle','none','capsize',csz,...
            'color',c_rem,'linewidth',2);
        nrem_bar = bar(2,NREM_mean,bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
        nrem_err = errorbar(2,NREM_mean,NREM_sem,'linestyle','none','capsize',csz,...
            'color',c_nrem,'linewidth',2);
        if mylims
            xl = [.5 2.5];
            yl = [-20 60];
            yt = [-20:20:60];
        else
            xl = get(gca,'xlim');
            yl = get(gca,'ylim');
            yt = get(gca,'ytick');
        end
        text(.75,50,sprintf('p = %.4f',p_rem),'fontsize',16);
        text(1.75,50,sprintf('p = %.4f',p_nrem),'fontsize',16);
        set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'Active','Quiet'},...
            'ytick',yt);
        ylabel({'Firing rate change', '(% change from first NREM epoch)'},'fontsize',14);
        title('Ext. Sleep delta FR by state','fontsize',18);
    
%         ref_l = refline(0,1);
%         ref_l.LineStyle = '--';
%         ref_l.LineWidth = 1.5;
%         ref_l.Color = 'k';

        
        %% calculate light vs dark circ data bins
        sleep_starts_CIRC_REM = mod(sleep_starts_nonan_REM./3600, 24);
        sleep_starts_CIRC_NREM = mod(sleep_starts_nonan_NREM./3600, 24);
        
        sleep_ends_CIRC_REM = sleep_starts_CIRC_REM + sleepdur_nonan_REM/3600;
        sleep_ends_CIRC_NREM = sleep_starts_CIRC_NREM + sleepdur_nonan_NREM/3600;


        CIRC_REM_this_group = {};
        CIRC_NREM_this_group = {};
        CIRC_REM_group_means = [];
        CIRC_REM_group_sem = [];
        CIRC_NREM_group_means = [];
        CIRC_NREM_group_sem = [];
        CIRC_group_means_offT = [];
        
        CIRC_group_split = 0 : 12 : 24;
        ngroups = numel(CIRC_group_split)-1;
        for uu = 1:ngroups
            
            g0 = CIRC_group_split(uu);
            g1 = CIRC_group_split(uu+1);
            CIRC_REM_this_group_idx = find(sleep_starts_CIRC_REM >= g0 & sleep_ends_CIRC_REM < g1);
            CIRC_NREM_this_group_idx = find(sleep_starts_CIRC_NREM >= g0 & sleep_ends_CIRC_NREM < g1);
            CIRC_REM_this_group{uu} = REM_delta_nonan(CIRC_REM_this_group_idx);
            CIRC_NREM_this_group{uu}= NREM_delta_nonan(CIRC_NREM_this_group_idx);
            CIRC_REM_group_means(uu) = nanmean(CIRC_REM_this_group{uu});
            CIRC_REM_group_sem(uu) = std(CIRC_REM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_REM_this_group{uu})-1);
            CIRC_NREM_group_means(uu) = nanmean(CIRC_NREM_this_group{uu});
            CIRC_NREM_group_sem(uu) = std(CIRC_NREM_this_group{uu},0,'omitnan') / sqrt(numel(CIRC_NREM_this_group{uu})-1);
            CIRC_group_means_offT(uu) = mean([g0,g1]);
        end
    
        %% Fig - plotting the first-last change - Light vs dark
        mylims = 1;
        
        for per_num = 1:length(CIRC_group_split)-1
            %light group == 1
    %         per_num = 1;
        
            [~,p_rem] = ttest(CIRC_REM_this_group{per_num});
            [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            [~,p_nrem] = ttest(CIRC_NREM_this_group{per_num});
            [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            
            dfig = figure();
            set(dfig,'position',[.1 .2 .25 .4]);
            box off
            hold on;
            bw = .3;
            csz = 20;
            mfc1 = c_rem;
            mfc2 = c_nrem;
            ec1 = 'none';
            ec2 = 'none';
        
            rem_bar = bar(1,CIRC_REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            rem_err = errorbar(1,CIRC_REM_group_means(per_num),CIRC_REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(2,CIRC_NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(2,CIRC_NREM_group_means(per_num),CIRC_NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
            if mylims
                xl = [.5 2.5];
                yl = [-50 80];
                yt = [-50:30:80];
            else
                xlims = get(gca,'xlim');
                ylims = get(gca,'ylim');
                xl2 = get(gca,'xlim');
                yl2 = get(gca,'ylim');
            end
            text(.75,50,sprintf('p = %.4f',p_rem),'fontsize',16);
            text(1.75,50,sprintf('p = %.4f',p_nrem),'fontsize',16);
            set(gca,'xlim',xl,'ylim',yl,'xtick',[1 2],'xticklabel',{'Active','Quiet'},...
                'ytick',yt);
            ylabel({'Firing rate change (% change from first NREM epoch)'},'fontsize',16);
%             ref_l = refline(0,1);
%             ref_l.LineStyle = '--';
%             ref_l.LineWidth = 1.5;
%             ref_l.Color = 'k';        
            if per_num == 1
                title({['Ext. Sleep delta FR by state'],...
                    ['- Light Period']},'fontsize',16);
            else
                title({['Ext. Sleep delta FR by state'],...
                    ['- Dark Period']},'fontsize',16);
            end
        end
    
    
    
        %% delta changes vs. binned time post hunt
    
        sleep_starts_REM = sleep_starts_nonan_REM./3600;
        sleep_starts_NREM = sleep_starts_nonan_NREM./3600;
        
        sleep_ends_REM = sleep_starts_REM + sleepdur_nonan_REM/3600;
        sleep_ends_NREM = sleep_starts_NREM + sleepdur_nonan_NREM/3600;
    
        %% calculate light vs dark circ data bins
        REM_this_group = {};
        NREM_this_group = {};
        REM_group_means = [];
        REM_group_sem = [];
        NREM_group_means = [];
        NREM_group_sem = [];
        group_means_offT = [];
        
        group_hrs = 24;
        group_split = post_hunt_hr : group_hrs : 6.5*24;
        ngroups = numel(group_split)-1;
        for uu = 1:ngroups
            
            g0 = group_split(uu);
            g1 = group_split(uu+1);
            REM_this_group_idx = find(sleep_starts_REM >= g0 & sleep_ends_REM < g1);
            NREM_this_group_idx = find(sleep_starts_NREM >= g0 & sleep_ends_NREM < g1);
            REM_this_group{uu} = REM_delta_nonan(REM_this_group_idx);
            NREM_this_group{uu}= NREM_delta_nonan(NREM_this_group_idx);
            REM_group_means(uu) = nanmean(REM_this_group{uu});
            REM_group_sem(uu) = std(REM_this_group{uu},0,'omitnan') / sqrt(numel(REM_this_group{uu})-1);
            NREM_group_means(uu) = nanmean(NREM_this_group{uu});
            NREM_group_sem(uu) = std(NREM_this_group{uu},0,'omitnan') / sqrt(numel(NREM_this_group{uu})-1);
            group_means_offT(uu) = mean([g0,g1]);
        end
    
        dfig = figure();
        set(dfig,'position',[0.1021 0.2778 0.3521 0.3241]);
        box off
        hold on;
        bw = .3;
        csz = 20;
        mfc1 = c_rem;
        mfc2 = c_nrem;
        ec1 = 'none';
        ec2 = 'none';    
        mylims = 0;
        for per_num = 1:length(group_split)-1

            
            if ~isempty(REM_this_group{per_num})
                [~,p_rem] = ttest(REM_this_group{per_num});
%                 [a_rem,fsz_rem] = get_asterisks_from_pval(p_rem);
            else
                p_rem = 'nan';
            end
            if ~isempty(NREM_this_group{per_num})
                [~,p_nrem] = ttest(NREM_this_group{per_num});
%                 [a_nrem,fsz_nrem] = get_asterisks_from_pval(p_nrem);
            else
                p_nrem = 'nan';
            end
            
            bar_x1 = (per_num-1)*2 + 1;
            bar_x2 = (per_num-1)*2 + 2;
    
            rem_bar = bar(bar_x1,REM_group_means(per_num),bw,'edgecolor',ec1,'facecolor',mfc1,'linewidth',2);
            rem_err = errorbar(bar_x1,REM_group_means(per_num),REM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_rem,'linewidth',2);
            nrem_bar = bar(bar_x2,NREM_group_means(per_num),bw,'edgecolor',ec2,'facecolor',mfc2,'linewidth',2);
            nrem_err = errorbar(bar_x2,NREM_group_means(per_num),NREM_group_sem(per_num),'linestyle','none','capsize',csz,...
                'color',c_nrem,'linewidth',2);
    
            text(bar_x1,60,sprintf('p = %.4f',p_rem),'fontsize',10,'Rotation',45);
            text(bar_x2,60,sprintf('p = %.4f',p_nrem),'fontsize',10,'Rotation',45);
            ylabel({'Firing rate change','(% change from first NREM epoch)'},'fontsize',14);
    
    %         if per_num == 1
    %             title({['Ext. Sleep delta FR by state'],...
    %                 ['- Light Period']},'fontsize',16);
    %         else
    %             title({['Ext. Sleep delta FR by state'],...
    %                 ['- Dark Period']},'fontsize',16);
    %         end
        end
    
        post_hunt_hrs = group_split+group_hrs/2 - post_hunt_hr;
        set(gca,'xtick',1.5:2:length(group_split)*2,'xticklabel',post_hunt_hrs)
        xlabel('Hours post hunt')
        ylim([-20 75])

%         ref_l = refline(0,1);
%         ref_l.LineStyle = '--';
%         ref_l.LineWidth = 1.5;
%         ref_l.Color = 'k';             
        title('FR change by state post hunt')
    


        %%

end

%% END

n_sleep_periods = length(unique(sleepdur_nonan_NREM));
n_NREM_deltas = sum(delta_nonans_NREM);
n_REM_deltas = sum(delta_nonans_REM);
n_corr_pts_NREM = length(NREM_dFR_nonan);
n_corr_pts_REM = length(REM_dFR_nonan);

disp(['n = ',num2str(n_sleep_periods),' episodes'])
disp(['n = ',num2str(n_NREM_deltas),' NREM deltas, ',num2str(n_REM_deltas),' REM deltas'])
disp(['n = ',num2str(n_corr_pts_NREM),' NREM points, ',num2str(n_corr_pts_REM),' REM points'])


keyboard;
close all

%save workspace?
clear MASTER
clear loadFile
clear all_sp_times add_sps BL_sp_times cell_sp_times anim_cells rsu spikes rate_onoff
save(savedata_path)